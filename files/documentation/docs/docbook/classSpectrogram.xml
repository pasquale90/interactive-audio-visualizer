<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classSpectrogram" xml:lang="en-US">
<title>Spectrogram Class Reference</title>
<indexterm><primary>Spectrogram</primary></indexterm>
<para>

<para>Ring buffer class to generate a spectrogram of the audio signal using the Fast Fourier Transform (FFT). </para>
 
</para>
<para>
<computeroutput>#include &lt;spectrogram.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classSpectrogram_1ae4523300613ab1370fd7ae9bfc71d877">Spectrogram</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_classSpectrogram_1a175fda7cc377563bffde2240aab8bfa7">~Spectrogram</link> ()</para>

<para>Class destructor. </para>
</listitem>
            <listitem><para><link linkend="_classSpectrogram_1a3dc6ad061e01b4b01cbabb6e6edc46bd">Spectrogram</link> (const <link linkend="_classSpectrogram">Spectrogram</link> &amp;)=delete</para>

<para>Copy constructor is deleted to prevent accidental use. </para>
</listitem>
            <listitem><para><link linkend="_classSpectrogram_1ab8caf0233122cf14a7b9e41d5ead6f57">Spectrogram</link> (<link linkend="_classSpectrogram">Spectrogram</link> &amp;&amp;)=delete</para>

<para>Move constructor is deleted to prevent accidental use. </para>
</listitem>
            <listitem><para><link linkend="_classSpectrogram">Spectrogram</link> &amp; <link linkend="_classSpectrogram_1a57b032882df6524168562ac62a5a9457">operator=</link> (const <link linkend="_classSpectrogram">Spectrogram</link> &amp;)=delete</para>

<para>Copy assignment operator is deleted to prevent accidental use. </para>
</listitem>
            <listitem><para><link linkend="_classSpectrogram">Spectrogram</link> &amp; <link linkend="_classSpectrogram_1a6e14e3a630b327161bad43409270e1c9">operator=</link> (<link linkend="_classSpectrogram">Spectrogram</link> &amp;&amp;)=delete</para>

<para>Move assignment operator is deleted to prevent accidental use. </para>
</listitem>
            <listitem><para>int <link linkend="_classSpectrogram_1a4662b609d61e705f4271526cad43f045">get_numAudioSamples</link> ()</para>

<para>Returns the number of audio samples used to calculate the spectrogram. </para>
</listitem>
            <listitem><para>int <link linkend="_classSpectrogram_1a9e2b3f56852a55ce83311d57104b7208">get_numFFTPoints</link> ()</para>

<para>Returns the number of FFT points. </para>
</listitem>
            <listitem><para>bool <link linkend="_classSpectrogram_1ab4f694b0b0fac913263703b588361090">write</link> (const float &amp;)</para>

<para>Function used to set the ring buffer with a value to the write position of the FIFO. </para>
</listitem>
            <listitem><para>bool <link linkend="_classSpectrogram_1a16d81b46bf82053953892344d3f24a2c">readBatch</link> (std::vector&lt; float &gt; &amp;, float &amp;, float &amp;)</para>

<para>Function used to read a batch of audio samples from the FIFO and store them in a provided vector. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Ring buffer class to generate a spectrogram of the audio signal using the Fast Fourier Transform (FFT). </para>



<para><note><title>Note</title>

<para>The spectrogram is calculated using the FFTW3 library. </para>
</note>
</para>
<para>
Definition at line <link linkend="_spectrogram_8h_source_1l00015">15</link> of file <link linkend="_spectrogram_8h_source">spectrogram.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classSpectrogram_1ae4523300613ab1370fd7ae9bfc71d877"/><section>
    <title>Spectrogram()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>Spectrogram</primary><secondary>Spectrogram</secondary></indexterm>
<indexterm><primary>Spectrogram</primary><secondary>Spectrogram</secondary></indexterm>
<para><computeroutput>Spectrogram::Spectrogram ( )</computeroutput></para><para>

<para>Default constructor. </para>
</para>
<para>
Definition at line <link linkend="_spectrogram_8cpp_source_1l00005">5</link> of file <link linkend="_spectrogram_8cpp_source">spectrogram.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;readpos(0),&#32;writepos(0),&#32;fft_in(700){
00006 &#32;&#32;
00007 &#32;&#32;calculateNFFT();
00008 &#32;&#32;
00009 &#32;&#32;initialize_hamming(numAudioSamples);
00010 
00011 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;fifoSize&#32;{numAudioSamples*2};
00012 &#32;&#32;ringBuffer.reserve(fifoSize);
00013 &#32;&#32;ringBuffer.resize(fifoSize);
00014 
00015 &#32;&#32;<emphasis role="comment">//&#32;fft_in&#32;=&#32;static_cast&lt;fftw_complex*&gt;&#32;(fftw_malloc(sizeof(fftw_complex)&#32;*&#32;numAudioSamples));</emphasis>
00016 &#32;&#32;fft_in.reserve(numAudioSamples);
00017 &#32;&#32;fft_in.resize(numAudioSamples);
00018 &#32;&#32;fft_out&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>fftw_complex*<emphasis role="keyword">&gt;</emphasis>&#32;(fftw_malloc(<emphasis role="keyword">sizeof</emphasis>(fftw_complex)&#32;*&#32;numFFTPoints));
00019 
00020 &#32;&#32;plan&#32;=&#32;fftw_plan_dft_r2c_1d(numAudioSamples,&#32;fft_in.data(),&#32;fft_out,&#32;FFTW_ESTIMATE);&#32;<emphasis role="comment">//FFTW_MEASURE</emphasis>
00021 
00022 &#32;&#32;minMagnitude&#32;=&#32;INT_MAX,&#32;maxMagnitude&#32;=&#32;0.;
00023 
00024 }
</programlisting></section>
<anchor xml:id="_classSpectrogram_1a175fda7cc377563bffde2240aab8bfa7"/><section>
    <title>~Spectrogram()</title>
<indexterm><primary>~Spectrogram</primary><secondary>Spectrogram</secondary></indexterm>
<indexterm><primary>Spectrogram</primary><secondary>~Spectrogram</secondary></indexterm>
<para><computeroutput>Spectrogram::~Spectrogram ( )</computeroutput></para><para>

<para>Class destructor. </para>
</para>
<para>
Definition at line <link linkend="_spectrogram_8cpp_source_1l00042">42</link> of file <link linkend="_spectrogram_8cpp_source">spectrogram.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00043 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(plan)&#32;fftw_destroy_plan(plan);
00044 &#32;&#32;fftw_cleanup();
00045 &#32;&#32;<emphasis role="comment">//&#32;fftw_free(fft_in);&#32;</emphasis>
00046 &#32;&#32;fftw_free(fft_out);
00047 }
</programlisting></section>
<anchor xml:id="_classSpectrogram_1a3dc6ad061e01b4b01cbabb6e6edc46bd"/><section>
    <title>Spectrogram()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>Spectrogram</primary><secondary>Spectrogram</secondary></indexterm>
<indexterm><primary>Spectrogram</primary><secondary>Spectrogram</secondary></indexterm>
<para><computeroutput>Spectrogram::Spectrogram (const <link linkend="_classSpectrogram">Spectrogram</link> &amp; )<computeroutput>[delete]</computeroutput></computeroutput></para><para>

<para>Copy constructor is deleted to prevent accidental use. </para>
</para>
</section>
<anchor xml:id="_classSpectrogram_1ab8caf0233122cf14a7b9e41d5ead6f57"/><section>
    <title>Spectrogram()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>Spectrogram</primary><secondary>Spectrogram</secondary></indexterm>
<indexterm><primary>Spectrogram</primary><secondary>Spectrogram</secondary></indexterm>
<para><computeroutput>Spectrogram::Spectrogram (<link linkend="_classSpectrogram">Spectrogram</link> &amp;&amp; )<computeroutput>[delete]</computeroutput></computeroutput></para><para>

<para>Move constructor is deleted to prevent accidental use. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classSpectrogram_1a4662b609d61e705f4271526cad43f045"/><section>
    <title>get_numAudioSamples()</title>
<indexterm><primary>get_numAudioSamples</primary><secondary>Spectrogram</secondary></indexterm>
<indexterm><primary>Spectrogram</primary><secondary>get_numAudioSamples</secondary></indexterm>
<para><computeroutput>int Spectrogram::get_numAudioSamples ( )</computeroutput></para><para>

<para>Returns the number of audio samples used to calculate the spectrogram. </para>
</para>

<para><note><title>Note</title>

<para>the number of audio samples defines the capacity of the ring buffer (FIFO). </para>
</note>
<formalpara><title>Returns</title>

<para>void </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_spectrogram_8cpp_source_1l00049">49</link> of file <link linkend="_spectrogram_8cpp_source">spectrogram.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00050 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;numAudioSamples;
00051 }
</programlisting></section>
<anchor xml:id="_classSpectrogram_1a9e2b3f56852a55ce83311d57104b7208"/><section>
    <title>get_numFFTPoints()</title>
<indexterm><primary>get_numFFTPoints</primary><secondary>Spectrogram</secondary></indexterm>
<indexterm><primary>Spectrogram</primary><secondary>get_numFFTPoints</secondary></indexterm>
<para><computeroutput>int Spectrogram::get_numFFTPoints ( )</computeroutput></para><para>

<para>Returns the number of FFT points. </para>
</para>

<para><formalpara><title>Returns</title>

<para>int - The number of FFT points </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_spectrogram_8cpp_source_1l00053">53</link> of file <link linkend="_spectrogram_8cpp_source">spectrogram.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;numFFTPoints;
00055 }
</programlisting></section>
<anchor xml:id="_classSpectrogram_1a57b032882df6524168562ac62a5a9457"/><section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Spectrogram</secondary></indexterm>
<indexterm><primary>Spectrogram</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classSpectrogram">Spectrogram</link> &amp; Spectrogram::operator= (const <link linkend="_classSpectrogram">Spectrogram</link> &amp; )<computeroutput>[delete]</computeroutput></computeroutput></para><para>

<para>Copy assignment operator is deleted to prevent accidental use. </para>
</para>
</section>
<anchor xml:id="_classSpectrogram_1a6e14e3a630b327161bad43409270e1c9"/><section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Spectrogram</secondary></indexterm>
<indexterm><primary>Spectrogram</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classSpectrogram">Spectrogram</link> &amp; Spectrogram::operator= (<link linkend="_classSpectrogram">Spectrogram</link> &amp;&amp; )<computeroutput>[delete]</computeroutput></computeroutput></para><para>

<para>Move assignment operator is deleted to prevent accidental use. </para>
</para>
</section>
<anchor xml:id="_classSpectrogram_1a16d81b46bf82053953892344d3f24a2c"/><section>
    <title>readBatch()</title>
<indexterm><primary>readBatch</primary><secondary>Spectrogram</secondary></indexterm>
<indexterm><primary>Spectrogram</primary><secondary>readBatch</secondary></indexterm>
<para><computeroutput>bool Spectrogram::readBatch (std::vector&lt; float &gt; &amp; result, float &amp; min_magnitude, float &amp; max_magnitude)</computeroutput></para><para>

<para>Function used to read a batch of audio samples from the FIFO and store them in a provided vector. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::vector&lt;float&gt;&amp;</entry><entry>
<para>- the vector to store the read audio samples </para>
</entry>
                            </row>
                            <row>
<entry>float&amp;</entry><entry>
<para>- the minimum magnitude of the audio samples in the batch </para>
</entry>
                            </row>
                            <row>
<entry>float&amp;</entry><entry>
<para>- the maximum magnitude of the audio samples in the batch </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>bool - Returns true if successful, false otherwise </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_spectrogram_8cpp_source_1l00074">74</link> of file <link linkend="_spectrogram_8cpp_source">spectrogram.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00075 &#32;&#32;&#32;&#32;
00076 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;the&#32;start&#32;index&#32;for&#32;reading&#32;the&#32;last&#32;N&#32;samples&#32;in&#32;a&#32;forward&#32;manner</emphasis>
00077 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;startIndex&#32;=&#32;(writepos.load()&#32;-&#32;numAudioSamples&#32;+&#32;1&#32;+&#32;ringBuffer.size())&#32;%&#32;ringBuffer.size();
00078 
00079 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;the&#32;N&#32;samples&#32;starting&#32;from&#32;startIndex</emphasis>
00080 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;readPos&#32;=&#32;startIndex;
00081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;(size_t)numAudioSamples;&#32;++i)&#32;{
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fft_in[i][0]=ringBuffer[readPos]&#32;*&#32;hamming_window[i];</emphasis>
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fft_in[i][1]=0;</emphasis>
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fft_in[i]=ringBuffer[readPos]&#32;*&#32;hamming_window[i];
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;readPos&#32;=&#32;(readPos&#32;+&#32;1)&#32;%&#32;ringBuffer.size();&#32;&#32;<emphasis role="comment">//&#32;Move&#32;to&#32;the&#32;next&#32;sample&#32;(circular)</emphasis>
00088 &#32;&#32;&#32;&#32;}
00089 
00090 &#32;&#32;&#32;&#32;fftw_execute(plan);
00091 &#32;&#32;&#32;&#32;
00092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numFFTPoints;&#32;++i)&#32;{
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Magnitude&#32;of&#32;the&#32;complex&#32;number</emphasis>
00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;magnitude&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(std::sqrt(fft_out[i][0]&#32;*&#32;fft_out[i][0]&#32;+&#32;fft_out[i][1]&#32;*&#32;fft_out[i][1]));
00095 
00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minMagnitude&#32;=&#32;std::min(minMagnitude,magnitude);
00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxMagnitude&#32;=&#32;std::max(maxMagnitude,magnitude);
00098 
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[i]&#32;=&#32;magnitude;
00100 &#32;&#32;&#32;&#32;}
00101 
00102 &#32;&#32;&#32;&#32;min_magnitude&#32;=&#32;minMagnitude;
00103 &#32;&#32;&#32;&#32;max_magnitude&#32;=&#32;maxMagnitude;
00104 &#32;&#32;&#32;&#32;
00105 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;readpos&#32;to&#32;point&#32;to&#32;the&#32;next&#32;sample&#32;to&#32;be&#32;read</emphasis>
00106 &#32;&#32;&#32;&#32;readpos.store((readPos&#32;+&#32;1)&#32;%&#32;ringBuffer.size());
00107 
00108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00109 }
</programlisting></section>
<anchor xml:id="_classSpectrogram_1ab4f694b0b0fac913263703b588361090"/><section>
    <title>write()</title>
<indexterm><primary>write</primary><secondary>Spectrogram</secondary></indexterm>
<indexterm><primary>Spectrogram</primary><secondary>write</secondary></indexterm>
<para><computeroutput>bool Spectrogram::write (const float &amp; arg)</computeroutput></para><para>

<para>Function used to set the ring buffer with a value to the write position of the FIFO. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>const</entry><entry>
<para>float&amp; - the audio sample to be written </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>bool - Returns true if successful, false otherwise </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_spectrogram_8cpp_source_1l00057">57</link> of file <link linkend="_spectrogram_8cpp_source">spectrogram.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;T&amp;&amp;&#32;arg&#32;--&gt;&#32;rvalue&#32;reference</emphasis>
00058 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;writePos&#32;=&#32;writepos.load();&#32;<emphasis role="comment">//??</emphasis>
00059 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;nextWritePos&#32;=&#32;(writePos&#32;+&#32;1)&#32;%&#32;ringBuffer.size();
00060 
00061 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;buffer&#32;is&#32;full,&#32;overwrite&#32;the&#32;oldest&#32;data</emphasis>
00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nextWritePos&#32;==&#32;readpos.load())&#32;{
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;readPos&#32;=&#32;(readpos.load()&#32;+&#32;1)&#32;%&#32;ringBuffer.size();
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;readpos.store(readPos,&#32;std::memory_order_release);
00065 &#32;&#32;&#32;&#32;}
00066 
00067 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;write&#32;data&#32;to&#32;the&#32;buffer</emphasis>
00068 &#32;&#32;&#32;&#32;ringBuffer[writePos]&#32;=&#32;arg;
00069 &#32;&#32;&#32;&#32;writepos.store(nextWritePos);
00070 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00071 
00072 }
</programlisting></section>
<para>
The documentation for this class was generated from the following files:</para>
include/<link linkend="_spectrogram_8h">spectrogram.h</link>src/<link linkend="_spectrogram_8cpp">spectrogram.cpp</link></section>
</section>
