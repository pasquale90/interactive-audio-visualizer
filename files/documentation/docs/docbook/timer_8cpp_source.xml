<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_timer_8cpp_source" xml:lang="en-US">
<title>timer.cpp</title>
<indexterm><primary>src/timer.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_timer_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_timer_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_timer_8h">timer.h</link>&quot;</emphasis>
<anchor xml:id="_timer_8cpp_source_1l00003"/>00003 
<anchor xml:id="_timer_8cpp_source_1l00004"/><link linkend="_classTimer_1a5f16e8da27d2a5a5242dead46de05d97">00004</link> <link linkend="_classTimer_1a5f16e8da27d2a5a5242dead46de05d97">Timer::Timer</link>()&#32;:&#32;initialSeconds(0),&#32;remainingTimeMilliseconds(0){}
<anchor xml:id="_timer_8cpp_source_1l00005"/>00005 
<anchor xml:id="_timer_8cpp_source_1l00006"/><link linkend="_classTimer_1a40123f84a3b830f2721bf4ed0d0b64f8">00006</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTimer_1a40123f84a3b830f2721bf4ed0d0b64f8">Timer::setTimer</link>(<emphasis role="keywordtype">int</emphasis>&#32;seconds)&#32;{
<anchor xml:id="_timer_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;initialSeconds&#32;=&#32;seconds;&#32;&#32;
<anchor xml:id="_timer_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;remainingTimeMilliseconds&#32;=&#32;seconds&#32;*&#32;1000;&#32;
<anchor xml:id="_timer_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;lastUpdateTime&#32;=&#32;std::chrono::steady_clock::now();
<anchor xml:id="_timer_8cpp_source_1l00010"/>00010 }
<anchor xml:id="_timer_8cpp_source_1l00011"/>00011 
<anchor xml:id="_timer_8cpp_source_1l00012"/><link linkend="_classTimer_1a3a8b5272198d029779dc9302a54305a8">00012</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classTimer_1a3a8b5272198d029779dc9302a54305a8">Timer::start</link>(){
<anchor xml:id="_timer_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;lastUpdateTime&#32;=&#32;std::chrono::steady_clock::now();&#32;
<anchor xml:id="_timer_8cpp_source_1l00014"/>00014 }
<anchor xml:id="_timer_8cpp_source_1l00015"/>00015 
<anchor xml:id="_timer_8cpp_source_1l00016"/><link linkend="_classTimer_1aa8cb793518f8630a02c526c2f1666f62">00016</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classTimer_1aa8cb793518f8630a02c526c2f1666f62">Timer::update</link>(<emphasis role="keywordtype">int</emphasis>&amp;&#32;secondsElapsed)&#32;{
<anchor xml:id="_timer_8cpp_source_1l00017"/>00017 
<anchor xml:id="_timer_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;time&#32;passed&#32;since&#32;last&#32;update</emphasis>
<anchor xml:id="_timer_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;now&#32;=&#32;std::chrono::steady_clock::now();
<anchor xml:id="_timer_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;std::chrono::duration&lt;int64_t,&#32;std::milli&gt;&#32;elapsed&#32;=&#32;std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(now&#32;-&#32;lastUpdateTime);
<anchor xml:id="_timer_8cpp_source_1l00021"/>00021 
<anchor xml:id="_timer_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Subtract&#32;elapsed&#32;milliseconds&#32;from&#32;the&#32;remaining&#32;time</emphasis>
<anchor xml:id="_timer_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;remainingTimeMilliseconds&#32;-=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(elapsed.count());&#32;&#32;
<anchor xml:id="_timer_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;lastUpdateTime&#32;=&#32;now;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;last&#32;time&#32;frame</emphasis>
<anchor xml:id="_timer_8cpp_source_1l00025"/>00025 
<anchor xml:id="_timer_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;timer&#32;has&#32;finished</emphasis>
<anchor xml:id="_timer_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(remainingTimeMilliseconds&#32;&lt;=&#32;0)&#32;{
<anchor xml:id="_timer_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remainingTimeMilliseconds&#32;=&#32;0;
<anchor xml:id="_timer_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;secondsElapsed&#32;=&#32;initialSeconds;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;elapsed&#32;time&#32;to&#32;the&#32;initial&#32;value</emphasis>
<anchor xml:id="_timer_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;
<anchor xml:id="_timer_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;}
<anchor xml:id="_timer_8cpp_source_1l00032"/>00032 
<anchor xml:id="_timer_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;elapsed&#32;time&#32;in&#32;seconds&#32;(rounded)</emphasis>
<anchor xml:id="_timer_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;secondsElapsed&#32;=&#32;remainingTimeMilliseconds;
<anchor xml:id="_timer_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_timer_8cpp_source_1l00036"/>00036 }
<anchor xml:id="_timer_8cpp_source_1l00037"/>00037 
<anchor xml:id="_timer_8cpp_source_1l00038"/>00038 <emphasis role="comment">//&#32;Function&#32;to&#32;get&#32;the&#32;remaining&#32;time&#32;for&#32;display&#32;or&#32;logging&#32;purposes</emphasis>
<anchor xml:id="_timer_8cpp_source_1l00039"/><link linkend="_classTimer_1a904b079e716d79ae9acff4ef84fff4b7">00039</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classTimer_1a904b079e716d79ae9acff4ef84fff4b7">Timer::getRemainingTime</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_timer_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;remainingTimeMilliseconds&#32;/&#32;1000;&#32;&#32;<emphasis role="comment">//&#32;Convert&#32;milliseconds&#32;back&#32;to&#32;seconds</emphasis>
<anchor xml:id="_timer_8cpp_source_1l00041"/>00041 }
<anchor xml:id="_timer_8cpp_source_1l00042"/>00042 
<anchor xml:id="_timer_8cpp_source_1l00043"/>00043 <emphasis role="comment">//&#32;Function&#32;to&#32;check&#32;if&#32;the&#32;timer&#32;has&#32;finished</emphasis>
<anchor xml:id="_timer_8cpp_source_1l00044"/><link linkend="_classTimer_1a35483f893f25c87981e8ca97cff74bd3">00044</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classTimer_1a35483f893f25c87981e8ca97cff74bd3">Timer::isTimerFinished</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_timer_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;remainingTimeMilliseconds&#32;&lt;=&#32;0;
<anchor xml:id="_timer_8cpp_source_1l00046"/>00046 }
<anchor xml:id="_timer_8cpp_source_1l00047"/>00047 
</programlisting></section>
