<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_screenhw_8h" xml:lang="en-US">
<title>include/gui/screenhw.h File Reference</title>
<indexterm><primary>include/gui/screenhw.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &lt;vector&gt;
#include &lt;utility&gt;
</programlisting>Include dependency graph for screenhw.h:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="screenhw_8h__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
This graph shows which files directly or indirectly include this file:<para>
    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="screenhw_8h__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>std::vector&lt; std::pair&lt; int, int &gt; &gt; <link linkend="_screenhw_8h_1a0fab6e35135db44188b8fd3c9e4b9a5a">get_screen_resolution</link> ()</para>

<para>Retrieves the resolution of the primary (default) screen using platform-specific APIs. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_screenhw_8h_1a0fab6e35135db44188b8fd3c9e4b9a5a"/><section>
    <title>get_screen_resolution()</title>
<indexterm><primary>get_screen_resolution</primary><secondary>screenhw.h</secondary></indexterm>
<indexterm><primary>screenhw.h</primary><secondary>get_screen_resolution</secondary></indexterm>
<para><computeroutput>std::vector&lt; std::pair&lt; int, int &gt; &gt; get_screen_resolution ( )</computeroutput></para><para>

<para>Retrieves the resolution of the primary (default) screen using platform-specific APIs. </para>
</para>

<para><formalpara><title>Returns</title>

<para>std::vector&lt;std::pair&lt;int,int&gt;&gt; - A list of pairs of integers representing the list of width and height supported by the screen. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_screenhw_8cpp_source_1l00010">10</link> of file <link linkend="_screenhw_8cpp_source">screenhw.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00011 
00012 &#32;&#32;&#32;&#32;std::vector&lt;std::pair&lt;int,int&gt;&gt;&#32;screen_resolutions;
00013 &#32;&#32;&#32;&#32;std::unordered_set&lt;std::string&gt;&#32;uniquesValues;
00014 
00015 &#32;&#32;&#32;&#32;Display*&#32;display&#32;=&#32;XOpenDisplay(NULL);
00016 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!display)&#32;{
00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error:&#32;Couldn&apos;t&#32;open&#32;display.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
00019 &#32;&#32;&#32;&#32;}
00020 
00021 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;screen&#32;=&#32;DefaultScreen(display);
00022 &#32;&#32;&#32;&#32;Window&#32;root&#32;=&#32;RootWindow(display,&#32;screen);
00023 
00024 &#32;&#32;&#32;&#32;XRRScreenResources*&#32;resources&#32;=&#32;XRRGetScreenResourcesCurrent(display,&#32;root);
00025 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!resources)&#32;{
00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Error:&#32;Could&#32;not&#32;get&#32;screen&#32;resources.&quot;</emphasis>&#32;&lt;&lt;&#32;std::endl;
00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XCloseDisplay(display);
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;{};
00029 &#32;&#32;&#32;&#32;}
00030 
00031 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;&quot;Available&#32;Screen&#32;Resolutions:&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
00032 
00033 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Iterate&#32;through&#32;all&#32;modes&#32;and&#32;display&#32;valid&#32;resolutions</emphasis>
00034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;resources-&gt;nmode;&#32;++i)&#32;{
00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;XRRModeInfo*&#32;mode&#32;=&#32;&amp;resources-&gt;modes[i];
00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(mode-&gt;width&#32;&gt;&#32;0&#32;&amp;&amp;&#32;mode-&gt;height&#32;&gt;&#32;0)&#32;{&#32;<emphasis role="comment">//&#32;Ensure&#32;valid&#32;dimensions</emphasis>
00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&#32;&lt;&lt;&#32;mode-&gt;width&#32;&lt;&lt;&#32;&quot;x&quot;&#32;&lt;&lt;&#32;mode-&gt;height&#32;&lt;&lt;&#32;std::endl;</emphasis>
00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;resVal&#32;=&#32;std::to_string(mode-&gt;width)&#32;+<emphasis role="stringliteral">&quot;x&quot;</emphasis>+&#32;std::to_string(mode-&gt;height);
00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(uniquesValues.find(resVal)==&#32;uniquesValues.end()){
00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;screen_resolutions.push_back({mode-&gt;width,&#32;mode-&gt;height});
00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uniquesValues.insert(resVal);
00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00044 &#32;&#32;&#32;&#32;}
00045 
00046 &#32;&#32;&#32;&#32;XRRFreeScreenResources(resources);
00047 &#32;&#32;&#32;&#32;XCloseDisplay(display);
00048 
00049 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;screen_resolutions;
00050 }
</programlisting></section>
</section>
</section>
