<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classAudioServer" xml:lang="en-US">
<title>AudioServer Class Reference</title>
<indexterm><primary>AudioServer</primary></indexterm>
<para>

<para>The jack-audio server running on the alsa drivers. </para>
 
</para>
<para>
<computeroutput>#include &lt;audioserver.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classAudioServer_1a805734cde851bf85b3bcb9bc8a76fb9e">AudioServer</link> (const char *driverName=<link linkend="_audioserver_8h_1acec480b06d69cadd02c28e6ebb9e2412">supported_driver</link>)</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_classAudioServer_1ae0e8c5f59aac9a1f4311b262e868cc5a">~AudioServer</link> ()</para>

<para>Class destructor Destroys the jack audio server and its associated resources. </para>
</listitem>
            <listitem><para>void <link linkend="_classAudioServer_1a19903646817c7d1f3dc2bec8d1f2811e">setup_server</link> ()</para>

<para>Setup the jack audio server by changing server parameters and alsa driver parameters. </para>
</listitem>
            <listitem><para>void <link linkend="_classAudioServer_1ad727e135d3776ff9a631e47873a6e239">start_server</link> (std::mutex &amp;, std::condition_variable &amp;, bool &amp;)</para>

<para>Starts the jack audio server. </para>
</listitem>
            <listitem><para>void <link linkend="_classAudioServer_1a536a796af0497242444f845df99aba34">stop_server</link> ()</para>

<para>Stops the jack audio server. </para>
</listitem>
            <listitem><para><link linkend="_classAudioServer_1a812b89afeb671dae2fda7674aa858761">AudioServer</link> (const <link linkend="_classAudioServer">AudioServer</link> &amp;)=delete</para>

<para>Copy constructor is deleted to prevent accidental use. </para>
</listitem>
            <listitem><para><link linkend="_classAudioServer_1a445545e5e10004d65ec649aafe53bf5f">AudioServer</link> (<link linkend="_classAudioServer">AudioServer</link> &amp;&amp;)=delete</para>

<para>Move constructor is deleted to prevent accidental use. </para>
</listitem>
            <listitem><para><link linkend="_classAudioServer">AudioServer</link> &amp; <link linkend="_classAudioServer_1a506d1caeb1dcdd2a93565d6ea1b8d213">operator=</link> (const <link linkend="_classAudioServer">AudioServer</link> &amp;)=delete</para>

<para>Copy assignment operator is deleted to prevent accidental use. </para>
</listitem>
            <listitem><para><link linkend="_classAudioServer">AudioServer</link> &amp; <link linkend="_classAudioServer_1a8bdf6e1d1391cfe12f19dab76ade9eb6">operator=</link> (<link linkend="_classAudioServer">AudioServer</link> &amp;&amp;)=delete</para>

<para>Move assignment operator is deleted to prevent accidental use. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>The jack-audio server running on the alsa drivers. </para>



<para><note><title>Note</title>

<para>This class encapsulates the functionality for managing the jack audio server and its associated resources It is responsible for setting up the jack audio server, starting it, and stopping it. </para>

<para>The <link linkend="_classAudioServer">AudioServer</link> class uses the jack library for managing the jack audio server. </para>
</note>
<formalpara><title>See also</title>

<para>the jack library documentation : <link xlink:href="https://jackaudio.org/api/">https://jackaudio.org/api/</link> </para>

<para>jack server example : <link xlink:href="https://github.com/jackaudio/example-clients/blob/master/server_control.c">https://github.com/jackaudio/example-clients/blob/master/server_control.c</link> </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_audioserver_8h_source_1l00022">22</link> of file <link linkend="_audioserver_8h_source">audioserver.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classAudioServer_1a805734cde851bf85b3bcb9bc8a76fb9e"/><section>
    <title>AudioServer()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>AudioServer</primary><secondary>AudioServer</secondary></indexterm>
<indexterm><primary>AudioServer</primary><secondary>AudioServer</secondary></indexterm>
<para><computeroutput>AudioServer::AudioServer (const char * driverName = <computeroutput><link linkend="_audioserver_8h_1acec480b06d69cadd02c28e6ebb9e2412">supported_driver</link></computeroutput>
)<computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>
<para>
Definition at line <link linkend="_audioserver_8cpp_source_1l00010">10</link> of file <link linkend="_audioserver_8cpp_source">audioserver.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:driver_name(driverName),audiocfg&#32;(<link linkend="_classConfig_1a2d423929da9ed51425ac0cf219b36f5e">Config::getInstance</link>().audconf){
00011 &#32;&#32;&#32;&#32;server&#32;=&#32;jackctl_server_create2(NULL,&#32;NULL,&#32;NULL);
00012 &#32;&#32;&#32;&#32;parameters&#32;=&#32;jackctl_server_get_parameters(server);
00013 &#32;&#32;&#32;&#32;sigmask&#32;=&#32;jackctl_setup_signals(0);
00014 &#32;&#32;&#32;&#32;drivers&#32;=&#32;jackctl_server_get_drivers_list(server);
00015 
00016 }
</programlisting></section>
<anchor xml:id="_classAudioServer_1ae0e8c5f59aac9a1f4311b262e868cc5a"/><section>
    <title>~AudioServer()</title>
<indexterm><primary>~AudioServer</primary><secondary>AudioServer</secondary></indexterm>
<indexterm><primary>AudioServer</primary><secondary>~AudioServer</secondary></indexterm>
<para><computeroutput>AudioServer::~AudioServer ( )</computeroutput></para><para>

<para>Class destructor Destroys the jack audio server and its associated resources. </para>
</para>
<para>
Definition at line <link linkend="_audioserver_8cpp_source_1l00018">18</link> of file <link linkend="_audioserver_8cpp_source">audioserver.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00019 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Stopping&#32;server\n&quot;</emphasis>);
00020 &#32;&#32;&#32;&#32;<link linkend="_classAudioServer_1a536a796af0497242444f845df99aba34">stop_server</link>();
00021 }
</programlisting></section>
<anchor xml:id="_classAudioServer_1a812b89afeb671dae2fda7674aa858761"/><section>
    <title>AudioServer()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>AudioServer</primary><secondary>AudioServer</secondary></indexterm>
<indexterm><primary>AudioServer</primary><secondary>AudioServer</secondary></indexterm>
<para><computeroutput>AudioServer::AudioServer (const <link linkend="_classAudioServer">AudioServer</link> &amp; )<computeroutput>[delete]</computeroutput></computeroutput></para><para>

<para>Copy constructor is deleted to prevent accidental use. </para>
</para>
</section>
<anchor xml:id="_classAudioServer_1a445545e5e10004d65ec649aafe53bf5f"/><section>
    <title>AudioServer()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>AudioServer</primary><secondary>AudioServer</secondary></indexterm>
<indexterm><primary>AudioServer</primary><secondary>AudioServer</secondary></indexterm>
<para><computeroutput>AudioServer::AudioServer (<link linkend="_classAudioServer">AudioServer</link> &amp;&amp; )<computeroutput>[delete]</computeroutput></computeroutput></para><para>

<para>Move constructor is deleted to prevent accidental use. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classAudioServer_1a8bdf6e1d1391cfe12f19dab76ade9eb6"/><section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>AudioServer</secondary></indexterm>
<indexterm><primary>AudioServer</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classAudioServer">AudioServer</link> &amp; AudioServer::operator= (<link linkend="_classAudioServer">AudioServer</link> &amp;&amp; )<computeroutput>[delete]</computeroutput></computeroutput></para><para>

<para>Move assignment operator is deleted to prevent accidental use. </para>
</para>
</section>
<anchor xml:id="_classAudioServer_1a506d1caeb1dcdd2a93565d6ea1b8d213"/><section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>AudioServer</secondary></indexterm>
<indexterm><primary>AudioServer</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classAudioServer">AudioServer</link> &amp; AudioServer::operator= (const <link linkend="_classAudioServer">AudioServer</link> &amp; )<computeroutput>[delete]</computeroutput></computeroutput></para><para>

<para>Copy assignment operator is deleted to prevent accidental use. </para>
</para>
</section>
<anchor xml:id="_classAudioServer_1a19903646817c7d1f3dc2bec8d1f2811e"/><section>
    <title>setup_server()</title>
<indexterm><primary>setup_server</primary><secondary>AudioServer</secondary></indexterm>
<indexterm><primary>AudioServer</primary><secondary>setup_server</secondary></indexterm>
<para><computeroutput>void AudioServer::setup_server ( )</computeroutput></para><para>

<para>Setup the jack audio server by changing server parameters and alsa driver parameters. </para>
</para>

<para><formalpara><title>Returns</title>

<para>void </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_audioserver_8cpp_source_1l00023">23</link> of file <link linkend="_audioserver_8cpp_source">audioserver.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00024 &#32;&#32;&#32;&#32;
00025 &#32;&#32;&#32;&#32;change_server_parameters();
00026 <emphasis role="preprocessor">#ifdef&#32;SERVER_VERBOSE</emphasis>
00027 &#32;&#32;&#32;&#32;print_driver_info();
00028 <emphasis role="preprocessor">#endif</emphasis>
00029 &#32;&#32;&#32;&#32;change_ALSAdriver_parameters();
00030 }
</programlisting></section>
<anchor xml:id="_classAudioServer_1ad727e135d3776ff9a631e47873a6e239"/><section>
    <title>start_server()</title>
<indexterm><primary>start_server</primary><secondary>AudioServer</secondary></indexterm>
<indexterm><primary>AudioServer</primary><secondary>start_server</secondary></indexterm>
<para><computeroutput>void AudioServer::start_server (std::mutex &amp; mtx, std::condition_variable &amp; cv, bool &amp; serverStarted)</computeroutput></para><para>

<para>Starts the jack audio server. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::mutex&amp;</entry><entry>
<para>- a mutex object to control synchronization with the client. </para>
</entry>
                            </row>
                            <row>
<entry>std::condition_variable&amp;</entry><entry>
<para>- a condition variable object to signal when the server is ready </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>void </para>
</formalpara>
<warning><title>Warning</title>

<para>The server has to be started before the audio client attempts to connect. </para>
</warning>
</para>
<para>
Definition at line <link linkend="_audioserver_8cpp_source_1l00037">37</link> of file <link linkend="_audioserver_8cpp_source">audioserver.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00038 &#32;&#32;&#32;&#32;jackctl_server_open(server,&#32;jackctl_server_get_driver());
00039 &#32;&#32;&#32;&#32;jackctl_server_start(server);
00040 
00041 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Signal&#32;that&#32;server&#32;has&#32;been&#32;started</emphasis>
00042 &#32;&#32;&#32;&#32;{
00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;lock(mtx);
00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;serverStarted&#32;=&#32;<emphasis role="keyword">true</emphasis>;
00045 &#32;&#32;&#32;&#32;}
00046 &#32;&#32;&#32;&#32;cv.notify_one();
00047 
00048 &#32;&#32;&#32;&#32;jackctl_wait_signals(sigmask);
00049 }
</programlisting></section>
<anchor xml:id="_classAudioServer_1a536a796af0497242444f845df99aba34"/><section>
    <title>stop_server()</title>
<indexterm><primary>stop_server</primary><secondary>AudioServer</secondary></indexterm>
<indexterm><primary>AudioServer</primary><secondary>stop_server</secondary></indexterm>
<para><computeroutput>void AudioServer::stop_server ( )</computeroutput></para><para>

<para>Stops the jack audio server. </para>
</para>

<para><formalpara><title>Returns</title>

<para>void </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_audioserver_8cpp_source_1l00031">31</link> of file <link linkend="_audioserver_8cpp_source">audioserver.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00032 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n\nShutting&#32;down&#32;server\n\n&quot;</emphasis>);
00033 &#32;&#32;&#32;&#32;jackctl_server_stop(server);
00034 &#32;&#32;&#32;&#32;jackctl_server_close(server);
00035 &#32;&#32;&#32;&#32;jackctl_server_destroy(server);
00036 }
</programlisting></section>
<para>
The documentation for this class was generated from the following files:</para>
include/<link linkend="_audioserver_8h">audioserver.h</link>src/<link linkend="_audioserver_8cpp">audioserver.cpp</link></section>
</section>
