<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classWaveform" xml:lang="en-US">
<title>Waveform Class Reference</title>
<indexterm><primary>Waveform</primary></indexterm>
<para>

<para>A circular buffer for storing audio samples. </para>
 
</para>
<para>
<computeroutput>#include &lt;waveform.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classWaveform_1a4a10db706dde8126a190a650f0b639fb">Waveform</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para>bool <link linkend="_classWaveform_1a6b4f4455a6a8ae2222f967e88b80460b">write</link> (const float &amp;)</para>

<para>Writes a new sample to the buffer. Advances the write position by one. </para>
</listitem>
            <listitem><para>bool <link linkend="_classWaveform_1ad4309d03c34e0b7ebe173ee8bd536116">read</link> (float &amp;)</para>

<para>Reads a sample from the buffer. Advances the read position by one. </para>
</listitem>
            <listitem><para>bool <link linkend="_classWaveform_1ab6511211e5b81756a2a6a502ba1f0d4b">isEmpty</link> () const</para>

<para>Checks if the buffer is empty. </para>
</listitem>
            <listitem><para>bool <link linkend="_classWaveform_1ac92843770623eb8e7d4d3b34bb5eef7a">isFull</link> () const</para>
</listitem>
            <listitem><para>size_t <link linkend="_classWaveform_1a55aadc54c0329bb9e25fecbf895b71f2">size</link> () const</para>

<para>Returns the capacity of the buffer. </para>
</listitem>
            <listitem><para>size_t <link linkend="_classWaveform_1affe280dcbbde4ed935db6ad3f5d6cc80">availableForReading</link> () const</para>

<para>Returns the number of samples that can be read from the buffer without blocking. </para>
</listitem>
            <listitem><para>void <link linkend="_classWaveform_1a57d9f5fae074ff6e3d7d1f687442e427">getMinMax</link> (float[2])</para>

<para>Calculates and returns the minimum and maximum values in the buffer. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A circular buffer for storing audio samples. </para>



<para><note><title>Note</title>

<para>The buffer is circular, meaning that when the write position reaches the buffer size, it wraps around to the beginning. </para>
</note>
</para>
<para>
Definition at line <link linkend="_waveform_8h_source_1l00012">12</link> of file <link linkend="_waveform_8h_source">waveform.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classWaveform_1a4a10db706dde8126a190a650f0b639fb"/><section>
    <title>Waveform()</title>
<indexterm><primary>Waveform</primary><secondary>Waveform</secondary></indexterm>
<indexterm><primary>Waveform</primary><secondary>Waveform</secondary></indexterm>
<para><computeroutput>Waveform::Waveform ( )</computeroutput></para><para>

<para>Default constructor. </para>
</para>
<para>
Definition at line <link linkend="_waveform_8cpp_source_1l00005">5</link> of file <link linkend="_waveform_8cpp_source">waveform.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;readpos(0),&#32;writepos(0){
00006 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calculate&#32;num&#32;of&#32;buffers&#32;per&#32;display&#32;frame;</emphasis>
00007 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;audioSamplesPerFrame&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(cfg.<link linkend="_classConfig_1a9f58fb425653b02d94a2961f7bdd9e45">audconf</link>.<link linkend="_structAudioConfig_1aa893cf0e18009ba2aeb67a105d42aa71">sampleRate</link>.load()&#32;/&#32;cfg.<link linkend="_classConfig_1ab6692268f819ce3f8474d1d791f3aaee">dispconf</link>.<link linkend="_structDisplayConfig_1aefdc15d97fa0d2e067d5efcfda0f4947">fps</link>.load());
00008 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;buffersPerFrame&#32;=&#32;std::ceil(&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(audioSamplesPerFrame)&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(cfg.<link linkend="_classConfig_1a9f58fb425653b02d94a2961f7bdd9e45">audconf</link>.<link linkend="_structAudioConfig_1ae81381142d99bc1845cb33bd048643df">bufferSize</link>.load()));
00009 &#32;&#32;&#32;&#32;audioSamplesPerFrame&#32;=&#32;(buffersPerFrame+1)&#32;*&#32;cfg.<link linkend="_classConfig_1a9f58fb425653b02d94a2961f7bdd9e45">audconf</link>.<link linkend="_structAudioConfig_1ae81381142d99bc1845cb33bd048643df">bufferSize</link>.load();&#32;<emphasis role="comment">//&#32;add&#32;1&#32;and&#32;make&#32;it&#32;divisible&#32;by&#32;bufferSize.</emphasis>
00010 
00011 &#32;&#32;&#32;&#32;waveTable.reserve(audioSamplesPerFrame);
00012 &#32;&#32;&#32;&#32;waveTable.resize(audioSamplesPerFrame);
00013 &#32;&#32;&#32;&#32;
00014 &#32;&#32;&#32;&#32;capacity&#32;=&#32;(size_t)audioSamplesPerFrame;
00015 &#32;&#32;&#32;&#32;min&#32;=&#32;INT_MAX,&#32;max&#32;=&#32;0.;
00016 }
</programlisting></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classWaveform_1affe280dcbbde4ed935db6ad3f5d6cc80"/><section>
    <title>availableForReading()</title>
<indexterm><primary>availableForReading</primary><secondary>Waveform</secondary></indexterm>
<indexterm><primary>Waveform</primary><secondary>availableForReading</secondary></indexterm>
<para><computeroutput>size_t Waveform::availableForReading ( ) const</computeroutput></para><para>

<para>Returns the number of samples that can be read from the buffer without blocking. </para>
</para>

<para><formalpara><title>Returns</title>

<para>size_t - the number of samples available for reading. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_waveform_8cpp_source_1l00068">68</link> of file <link linkend="_waveform_8cpp_source">waveform.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00069 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;writePos&#32;=&#32;writepos.load();
00070 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;readPos&#32;=&#32;readpos.load();
00071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(writePos&#32;&gt;=&#32;readPos)&#32;{
00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;writePos&#32;-&#32;readPos;&#32;&#32;<emphasis role="comment">//&#32;Normal&#32;case,&#32;no&#32;wraparound</emphasis>
00073 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;waveTable.size()&#32;-&#32;(readPos&#32;-&#32;writePos);&#32;&#32;<emphasis role="comment">//&#32;Wraparound&#32;case</emphasis>
00075 &#32;&#32;&#32;&#32;}
00076 }
</programlisting></section>
<anchor xml:id="_classWaveform_1a57d9f5fae074ff6e3d7d1f687442e427"/><section>
    <title>getMinMax()</title>
<indexterm><primary>getMinMax</primary><secondary>Waveform</secondary></indexterm>
<indexterm><primary>Waveform</primary><secondary>getMinMax</secondary></indexterm>
<para><computeroutput>void Waveform::getMinMax (float minMax[2])</computeroutput></para><para>

<para>Calculates and returns the minimum and maximum values in the buffer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>out</entry><entry>float[2]</entry><entry>
<para>min_max - The minimum and maximum values in the buffer. 0th element is minimum, 1st element is maximum. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>void</para>
</formalpara>
Retrieves the minimum and maximum values from the waveform. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>out</entry><entry>min</entry><entry>
<para>The minimum value (output parameter). </para>
</entry>
                            </row>
                            <row>
<entry>out</entry><entry>max</entry><entry>
<para>The maximum value (output parameter). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_waveform_8cpp_source_1l00083">83</link> of file <link linkend="_waveform_8cpp_source">waveform.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00084 &#32;&#32;&#32;&#32;minMax[0]&#32;=&#32;this-&gt;min;
00085 &#32;&#32;&#32;&#32;minMax[1]&#32;=&#32;this-&gt;max;
00086 }
</programlisting></section>
<anchor xml:id="_classWaveform_1ab6511211e5b81756a2a6a502ba1f0d4b"/><section>
    <title>isEmpty()</title>
<indexterm><primary>isEmpty</primary><secondary>Waveform</secondary></indexterm>
<indexterm><primary>Waveform</primary><secondary>isEmpty</secondary></indexterm>
<para><computeroutput>bool Waveform::isEmpty ( ) const</computeroutput></para><para>

<para>Checks if the buffer is empty. </para>
</para>

<para><formalpara><title>Returns</title>

<para>bool - true if the buffer is empty, false otherwise. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_waveform_8cpp_source_1l00056">56</link> of file <link linkend="_waveform_8cpp_source">waveform.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;readpos.load()&#32;==&#32;writepos.load();
00058 }
</programlisting></section>
<anchor xml:id="_classWaveform_1ac92843770623eb8e7d4d3b34bb5eef7a"/><section>
    <title>isFull()</title>
<indexterm><primary>isFull</primary><secondary>Waveform</secondary></indexterm>
<indexterm><primary>Waveform</primary><secondary>isFull</secondary></indexterm>
<para><computeroutput>bool Waveform::isFull ( ) const</computeroutput></para><para>
Definition at line <link linkend="_waveform_8cpp_source_1l00060">60</link> of file <link linkend="_waveform_8cpp_source">waveform.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((&#32;writepos.load()&#32;+&#32;1&#32;)&#32;%&#32;waveTable.size())&#32;==&#32;readpos.load();
00062 }
</programlisting></section>
<anchor xml:id="_classWaveform_1ad4309d03c34e0b7ebe173ee8bd536116"/><section>
    <title>read()</title>
<indexterm><primary>read</primary><secondary>Waveform</secondary></indexterm>
<indexterm><primary>Waveform</primary><secondary>read</secondary></indexterm>
<para><computeroutput>bool Waveform::read (float &amp; result)</computeroutput></para><para>

<para>Reads a sample from the buffer. Advances the read position by one. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>out</entry><entry>float&amp;</entry><entry>
<para>sample - the sample to be read. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>bool - true if the sample was successfully read, false otherwise. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_waveform_8cpp_source_1l00038">38</link> of file <link linkend="_waveform_8cpp_source">waveform.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00039 
00040 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;readPos&#32;=&#32;readpos.load();
00041 
00042 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;buffer&#32;is&#32;empty&#32;return&#32;false&#32;&#32;</emphasis>
00043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(readPos&#32;==&#32;writepos.load()){
00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
00045 &#32;&#32;&#32;&#32;}
00046 
00047 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move&#32;data&#32;out&#32;of&#32;the&#32;buffer;</emphasis>
00048 &#32;&#32;&#32;&#32;result&#32;=&#32;waveTable[readPos];
00049 
00050 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;advance&#32;the&#32;read&#32;pointer</emphasis>
00051 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;nextReadPos&#32;=&#32;(readPos&#32;+&#32;1)&#32;%&#32;waveTable.size();
00052 &#32;&#32;&#32;&#32;readpos.store(nextReadPos);
00053 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00054 }
</programlisting></section>
<anchor xml:id="_classWaveform_1a55aadc54c0329bb9e25fecbf895b71f2"/><section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>Waveform</secondary></indexterm>
<indexterm><primary>Waveform</primary><secondary>size</secondary></indexterm>
<para><computeroutput>size_t Waveform::size ( ) const</computeroutput></para><para>

<para>Returns the capacity of the buffer. </para>
</para>

<para><formalpara><title>Returns</title>

<para>size_t - the capacity of the buffer. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_waveform_8cpp_source_1l00064">64</link> of file <link linkend="_waveform_8cpp_source">waveform.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;
00065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;capacity;
00066 }
</programlisting></section>
<anchor xml:id="_classWaveform_1a6b4f4455a6a8ae2222f967e88b80460b"/><section>
    <title>write()</title>
<indexterm><primary>write</primary><secondary>Waveform</secondary></indexterm>
<indexterm><primary>Waveform</primary><secondary>write</secondary></indexterm>
<para><computeroutput>bool Waveform::write (const float &amp; arg)</computeroutput></para><para>

<para>Writes a new sample to the buffer. Advances the write position by one. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>in</entry><entry>float</entry><entry>
<para>sample - the new sample to be written. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>bool - true if the sample was successfully written, false otherwise. </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_waveform_8cpp_source_1l00018">18</link> of file <link linkend="_waveform_8cpp_source">waveform.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<emphasis role="comment">//&#32;T&amp;&amp;&#32;arg&#32;--&gt;&#32;rvalue&#32;reference</emphasis>
00019 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;writePos&#32;=&#32;writepos.load();&#32;<emphasis role="comment">//??</emphasis>
00020 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;nextWritePos&#32;=&#32;(writePos&#32;+&#32;1)&#32;%&#32;waveTable.size();
00021 
00022 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;buffer&#32;is&#32;full,&#32;overwrite&#32;the&#32;oldest&#32;data</emphasis>
00023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nextWritePos&#32;==&#32;readpos.load())&#32;{
00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;readPos&#32;=&#32;(readpos.load()&#32;+&#32;1)&#32;%&#32;waveTable.size();
00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;readpos.store(readPos,&#32;std::memory_order_release);
00026 &#32;&#32;&#32;&#32;}
00027 
00028 &#32;&#32;&#32;&#32;min&#32;=&#32;std::min(min,arg);
00029 &#32;&#32;&#32;&#32;max&#32;=&#32;std::max(max,arg);
00030 &#32;&#32;&#32;&#32;
00031 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;write&#32;data&#32;to&#32;the&#32;buffer</emphasis>
00032 &#32;&#32;&#32;&#32;waveTable[writePos]&#32;=&#32;arg;
00033 &#32;&#32;&#32;&#32;writepos.store(nextWritePos);
00034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
00035 
00036 }
</programlisting></section>
<para>
The documentation for this class was generated from the following files:</para>
include/<link linkend="_waveform_8h">waveform.h</link>src/<link linkend="_waveform_8cpp">waveform.cpp</link></section>
</section>
