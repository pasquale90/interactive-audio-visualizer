<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_spectrogram_8cpp_source" xml:lang="en-US">
<title>spectrogram.cpp</title>
<indexterm><primary>src/spectrogram.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_spectrogram_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;climits&gt;</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_spectrogram_8h">spectrogram.h</link>&quot;</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00004"/>00004 
<anchor xml:id="_spectrogram_8cpp_source_1l00005"/><link linkend="_classSpectrogram_1ae4523300613ab1370fd7ae9bfc71d877">00005</link> <link linkend="_classSpectrogram_1ae4523300613ab1370fd7ae9bfc71d877">Spectrogram::Spectrogram</link>():&#32;readpos(0),&#32;writepos(0),&#32;fft_in(700){
<anchor xml:id="_spectrogram_8cpp_source_1l00006"/>00006 &#32;&#32;
<anchor xml:id="_spectrogram_8cpp_source_1l00007"/>00007 &#32;&#32;calculateNFFT();
<anchor xml:id="_spectrogram_8cpp_source_1l00008"/>00008 &#32;&#32;
<anchor xml:id="_spectrogram_8cpp_source_1l00009"/>00009 &#32;&#32;initialize_hamming(numAudioSamples);
<anchor xml:id="_spectrogram_8cpp_source_1l00010"/>00010 
<anchor xml:id="_spectrogram_8cpp_source_1l00011"/>00011 &#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;fifoSize&#32;{numAudioSamples*2};
<anchor xml:id="_spectrogram_8cpp_source_1l00012"/>00012 &#32;&#32;ringBuffer.reserve(fifoSize);
<anchor xml:id="_spectrogram_8cpp_source_1l00013"/>00013 &#32;&#32;ringBuffer.resize(fifoSize);
<anchor xml:id="_spectrogram_8cpp_source_1l00014"/>00014 
<anchor xml:id="_spectrogram_8cpp_source_1l00015"/>00015 &#32;&#32;<emphasis role="comment">//&#32;fft_in&#32;=&#32;static_cast&lt;fftw_complex*&gt;&#32;(fftw_malloc(sizeof(fftw_complex)&#32;*&#32;numAudioSamples));</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00016"/>00016 &#32;&#32;fft_in.reserve(numAudioSamples);
<anchor xml:id="_spectrogram_8cpp_source_1l00017"/>00017 &#32;&#32;fft_in.resize(numAudioSamples);
<anchor xml:id="_spectrogram_8cpp_source_1l00018"/>00018 &#32;&#32;fft_out&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>fftw_complex*<emphasis role="keyword">&gt;</emphasis>&#32;(fftw_malloc(<emphasis role="keyword">sizeof</emphasis>(fftw_complex)&#32;*&#32;numFFTPoints));
<anchor xml:id="_spectrogram_8cpp_source_1l00019"/>00019 
<anchor xml:id="_spectrogram_8cpp_source_1l00020"/>00020 &#32;&#32;plan&#32;=&#32;fftw_plan_dft_r2c_1d(numAudioSamples,&#32;fft_in.data(),&#32;fft_out,&#32;FFTW_ESTIMATE);&#32;<emphasis role="comment">//FFTW_MEASURE</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00021"/>00021 
<anchor xml:id="_spectrogram_8cpp_source_1l00022"/>00022 &#32;&#32;minMagnitude&#32;=&#32;INT_MAX,&#32;maxMagnitude&#32;=&#32;0.;
<anchor xml:id="_spectrogram_8cpp_source_1l00023"/>00023 
<anchor xml:id="_spectrogram_8cpp_source_1l00024"/>00024 }
<anchor xml:id="_spectrogram_8cpp_source_1l00025"/>00025 
<anchor xml:id="_spectrogram_8cpp_source_1l00026"/>00026 <emphasis role="keywordtype">void</emphasis>&#32;Spectrogram::calculateNFFT(){
<anchor xml:id="_spectrogram_8cpp_source_1l00027"/>00027 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;W&#32;=&#32;cfg.<link linkend="_classConfig_1ab6692268f819ce3f8474d1d791f3aaee">dispconf</link>.<link linkend="_structDisplayConfig_1a633402e1095e221e678ce55fee7f3f9e">dispResW</link>.load();
<anchor xml:id="_spectrogram_8cpp_source_1l00028"/>00028 &#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;n&#32;=&#32;2;&#32;
<anchor xml:id="_spectrogram_8cpp_source_1l00029"/>00029 &#32;&#32;<emphasis role="comment">//&#32;n^round(log_n(x)),&#32;where&#32;log_n(x)&#32;=&#32;log(x)&#32;/&#32;log(n)</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00030"/>00030 &#32;&#32;<emphasis role="comment">//&#32;numFFTPoints&#32;=&#32;std::pow(n,&#32;std::round(&#32;std::log(W)&#32;/&#32;std::log(n)&#32;))&#32;;</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00031"/>00031 &#32;&#32;numAudioSamples&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(std::pow(n,&#32;std::floor(&#32;std::log(W)&#32;/&#32;std::log(n)&#32;)))&#32;;&#32;<emphasis role="comment">//&#32;the&#32;closest&#32;power&#32;of&#32;two&#32;to&#32;a&#32;width&#32;(lower&#32;than&#32;width)</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00032"/>00032 &#32;&#32;numFFTPoints&#32;=&#32;numAudioSamples&#32;/&#32;2&#32;+&#32;1;
<anchor xml:id="_spectrogram_8cpp_source_1l00033"/>00033 }
<anchor xml:id="_spectrogram_8cpp_source_1l00034"/>00034 
<anchor xml:id="_spectrogram_8cpp_source_1l00035"/>00035 <emphasis role="keywordtype">void</emphasis>&#32;Spectrogram::initialize_hamming(<emphasis role="keywordtype">int</emphasis>&#32;n){
<anchor xml:id="_spectrogram_8cpp_source_1l00036"/>00036 &#32;&#32;hamming_window.reserve(n);
<anchor xml:id="_spectrogram_8cpp_source_1l00037"/>00037 &#32;&#32;hamming_window.resize(n);
<anchor xml:id="_spectrogram_8cpp_source_1l00038"/>00038 &#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i=0;i&lt;n;++i)
<anchor xml:id="_spectrogram_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;hamming_window[i]=0.54f-0.46f*&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(cos(2*<link linkend="_spectrogram_8h_1a598a3330b3c21701223ee0ca14316eca">PI</link>*i/(n-1)));
<anchor xml:id="_spectrogram_8cpp_source_1l00040"/>00040 }
<anchor xml:id="_spectrogram_8cpp_source_1l00041"/>00041 
<anchor xml:id="_spectrogram_8cpp_source_1l00042"/><link linkend="_classSpectrogram_1a175fda7cc377563bffde2240aab8bfa7">00042</link> <link linkend="_classSpectrogram_1a175fda7cc377563bffde2240aab8bfa7">Spectrogram::~Spectrogram</link>(){
<anchor xml:id="_spectrogram_8cpp_source_1l00043"/>00043 &#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(plan)&#32;fftw_destroy_plan(plan);
<anchor xml:id="_spectrogram_8cpp_source_1l00044"/>00044 &#32;&#32;fftw_cleanup();
<anchor xml:id="_spectrogram_8cpp_source_1l00045"/>00045 &#32;&#32;<emphasis role="comment">//&#32;fftw_free(fft_in);&#32;</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00046"/>00046 &#32;&#32;fftw_free(fft_out);
<anchor xml:id="_spectrogram_8cpp_source_1l00047"/>00047 }
<anchor xml:id="_spectrogram_8cpp_source_1l00048"/>00048 
<anchor xml:id="_spectrogram_8cpp_source_1l00049"/><link linkend="_classSpectrogram_1a4662b609d61e705f4271526cad43f045">00049</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSpectrogram_1a4662b609d61e705f4271526cad43f045">Spectrogram::get_numAudioSamples</link>(){
<anchor xml:id="_spectrogram_8cpp_source_1l00050"/>00050 &#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;numAudioSamples;
<anchor xml:id="_spectrogram_8cpp_source_1l00051"/>00051 }
<anchor xml:id="_spectrogram_8cpp_source_1l00052"/>00052 
<anchor xml:id="_spectrogram_8cpp_source_1l00053"/><link linkend="_classSpectrogram_1a9e2b3f56852a55ce83311d57104b7208">00053</link> <emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classSpectrogram_1a9e2b3f56852a55ce83311d57104b7208">Spectrogram::get_numFFTPoints</link>(){
<anchor xml:id="_spectrogram_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;numFFTPoints;
<anchor xml:id="_spectrogram_8cpp_source_1l00055"/>00055 }
<anchor xml:id="_spectrogram_8cpp_source_1l00056"/>00056 
<anchor xml:id="_spectrogram_8cpp_source_1l00057"/><link linkend="_classSpectrogram_1ab4f694b0b0fac913263703b588361090">00057</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classSpectrogram_1ab4f694b0b0fac913263703b588361090">Spectrogram::write</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&amp;&#32;arg){&#32;<emphasis role="comment">//&#32;T&amp;&amp;&#32;arg&#32;--&gt;&#32;rvalue&#32;reference</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;writePos&#32;=&#32;writepos.load();&#32;<emphasis role="comment">//??</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;nextWritePos&#32;=&#32;(writePos&#32;+&#32;1)&#32;%&#32;ringBuffer.size();
<anchor xml:id="_spectrogram_8cpp_source_1l00060"/>00060 
<anchor xml:id="_spectrogram_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;buffer&#32;is&#32;full,&#32;overwrite&#32;the&#32;oldest&#32;data</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nextWritePos&#32;==&#32;readpos.load())&#32;{
<anchor xml:id="_spectrogram_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;readPos&#32;=&#32;(readpos.load()&#32;+&#32;1)&#32;%&#32;ringBuffer.size();
<anchor xml:id="_spectrogram_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;readpos.store(readPos,&#32;std::memory_order_release);
<anchor xml:id="_spectrogram_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;}
<anchor xml:id="_spectrogram_8cpp_source_1l00066"/>00066 
<anchor xml:id="_spectrogram_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;write&#32;data&#32;to&#32;the&#32;buffer</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;ringBuffer[writePos]&#32;=&#32;arg;
<anchor xml:id="_spectrogram_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;writepos.store(nextWritePos);
<anchor xml:id="_spectrogram_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_spectrogram_8cpp_source_1l00071"/>00071 
<anchor xml:id="_spectrogram_8cpp_source_1l00072"/>00072 }
<anchor xml:id="_spectrogram_8cpp_source_1l00073"/>00073 
<anchor xml:id="_spectrogram_8cpp_source_1l00074"/><link linkend="_classSpectrogram_1a16d81b46bf82053953892344d3f24a2c">00074</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classSpectrogram_1a16d81b46bf82053953892344d3f24a2c">Spectrogram::readBatch</link>(std::vector&lt;float&gt;&amp;&#32;result,&#32;<emphasis role="keywordtype">float</emphasis>&#32;&amp;min_magnitude,&#32;<emphasis role="keywordtype">float</emphasis>&#32;&amp;max_magnitude)&#32;{
<anchor xml:id="_spectrogram_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;
<anchor xml:id="_spectrogram_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;the&#32;start&#32;index&#32;for&#32;reading&#32;the&#32;last&#32;N&#32;samples&#32;in&#32;a&#32;forward&#32;manner</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;startIndex&#32;=&#32;(writepos.load()&#32;-&#32;numAudioSamples&#32;+&#32;1&#32;+&#32;ringBuffer.size())&#32;%&#32;ringBuffer.size();
<anchor xml:id="_spectrogram_8cpp_source_1l00078"/>00078 
<anchor xml:id="_spectrogram_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Read&#32;the&#32;N&#32;samples&#32;starting&#32;from&#32;startIndex</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;readPos&#32;=&#32;startIndex;
<anchor xml:id="_spectrogram_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;(size_t)numAudioSamples;&#32;++i)&#32;{
<anchor xml:id="_spectrogram_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_spectrogram_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fft_in[i][0]=ringBuffer[readPos]&#32;*&#32;hamming_window[i];</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;fft_in[i][1]=0;</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fft_in[i]=ringBuffer[readPos]&#32;*&#32;hamming_window[i];
<anchor xml:id="_spectrogram_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_spectrogram_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;readPos&#32;=&#32;(readPos&#32;+&#32;1)&#32;%&#32;ringBuffer.size();&#32;&#32;<emphasis role="comment">//&#32;Move&#32;to&#32;the&#32;next&#32;sample&#32;(circular)</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;}
<anchor xml:id="_spectrogram_8cpp_source_1l00089"/>00089 
<anchor xml:id="_spectrogram_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;fftw_execute(plan);
<anchor xml:id="_spectrogram_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;
<anchor xml:id="_spectrogram_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;numFFTPoints;&#32;++i)&#32;{
<anchor xml:id="_spectrogram_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Magnitude&#32;of&#32;the&#32;complex&#32;number</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;magnitude&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(std::sqrt(fft_out[i][0]&#32;*&#32;fft_out[i][0]&#32;+&#32;fft_out[i][1]&#32;*&#32;fft_out[i][1]));
<anchor xml:id="_spectrogram_8cpp_source_1l00095"/>00095 
<anchor xml:id="_spectrogram_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minMagnitude&#32;=&#32;std::min(minMagnitude,magnitude);
<anchor xml:id="_spectrogram_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxMagnitude&#32;=&#32;std::max(maxMagnitude,magnitude);
<anchor xml:id="_spectrogram_8cpp_source_1l00098"/>00098 
<anchor xml:id="_spectrogram_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result[i]&#32;=&#32;magnitude;
<anchor xml:id="_spectrogram_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;}
<anchor xml:id="_spectrogram_8cpp_source_1l00101"/>00101 
<anchor xml:id="_spectrogram_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;min_magnitude&#32;=&#32;minMagnitude;
<anchor xml:id="_spectrogram_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;max_magnitude&#32;=&#32;maxMagnitude;
<anchor xml:id="_spectrogram_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;
<anchor xml:id="_spectrogram_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;readpos&#32;to&#32;point&#32;to&#32;the&#32;next&#32;sample&#32;to&#32;be&#32;read</emphasis>
<anchor xml:id="_spectrogram_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;readpos.store((readPos&#32;+&#32;1)&#32;%&#32;ringBuffer.size());
<anchor xml:id="_spectrogram_8cpp_source_1l00107"/>00107 
<anchor xml:id="_spectrogram_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_spectrogram_8cpp_source_1l00109"/>00109 }
</programlisting></section>
