<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classAudioStream" xml:lang="en-US">
<title>AudioStream Class Reference</title>
<indexterm><primary>AudioStream</primary></indexterm>
<para>

<para>A class representing the audio streaming functionality. </para>
 
</para>
<para>
<computeroutput>#include &lt;audio.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classAudioStream_1ab2e106f7e2f70f0cfb1d7b171da71f16">AudioStream</link> ()</para>

<para>Class contructor. In this program, a setConfig is used for implicit initialization. </para>
</listitem>
            <listitem><para><link linkend="_classAudioStream_1a480e5d3468bfe9357dd6c40649b1e449">~AudioStream</link> ()</para>

<para>class destructor disconnects the client from the server </para>
</listitem>
            <listitem><para>void <link linkend="_classAudioStream_1ab4f577911f9c1b1ae64de56e6b2b96af">clientConnect</link> (std::mutex &amp;, std::condition_variable &amp;, bool &amp;)</para>

<para>Starts a connection to the server and creates the connection graph which connects the inputs with the outputs. </para>
</listitem>
            <listitem><para>void <link linkend="_classAudioStream_1a86a07551cb80ac8248ad0b1953ffb81d">closeStream</link> ()</para>

<para>Disconnects the client from the server. </para>
</listitem>
            <listitem><para>int <link linkend="_classAudioStream_1ac6b5d301d25e74b9b18a58cf5d854385">streamBuffer</link> ()</para>

<para>Member function for streaming the audio buffer. It is a Callback function called implicitly via the static AudioStream::streamAudio function. Inside the function, the sine wave generator is called to fill the audio buffers with the generated sine waves. </para>
</listitem>
            <listitem><para>void <link linkend="_classAudioStream_1a79ba2b085605b367698a204bb28fc6e7">update</link> (int, float)</para>

<para>Updates the tone member variable with a new frequency and volume. </para>
</listitem>
            <listitem><para>void <link linkend="_classAudioStream_1a0f4ac8181f32c9b1466eb35ed723b167">setVisualizerUpdater</link> (std::function&lt; void(float)&gt;)</para>

<para>Sets the visualizer updater function. </para>
</listitem>
            <listitem><para><link linkend="_classAudioStream_1a2e8501a76d4801c9f91bda8bfba583e4">AudioStream</link> (const <link linkend="_classAudioStream">AudioStream</link> &amp;)=delete</para>

<para>Copy constructor is deleted to prevent accidental use. </para>
</listitem>
            <listitem><para><link linkend="_classAudioStream_1aad83ff2805214222217732d8acc76ff9">AudioStream</link> (<link linkend="_classAudioStream">AudioStream</link> &amp;&amp;)=delete</para>

<para>Move constructor is deleted to prevent accidental use. </para>
</listitem>
            <listitem><para><link linkend="_classAudioStream">AudioStream</link> &amp; <link linkend="_classAudioStream_1a012dba5698b8dab4d86d23f531a97181">operator=</link> (const <link linkend="_classAudioStream">AudioStream</link> &amp;)=delete</para>

<para>Copy assignment operator is deleted to prevent accidental use. </para>
</listitem>
            <listitem><para><link linkend="_classAudioStream">AudioStream</link> &amp; <link linkend="_classAudioStream_1aa193e5e2a4946523712422a6503a87c1">operator=</link> (<link linkend="_classAudioStream">AudioStream</link> &amp;&amp;)=delete</para>

<para>Move assignment operator is deleted to prevent accidental use. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A class representing the audio streaming functionality. </para>



<para>Class for routing audio signal. Uses the jack audio API. <note><title>Note</title>

<para>This class manages the audio streaming process, including connecting to the server, creating the connection graph, and streaming the audio buffer. </para>
</note>
<formalpara><title>See also</title>

<para>the jack library documentation : <link xlink:href="https://jackaudio.org/api/">https://jackaudio.org/api/</link> </para>

<para>jack client example : <link xlink:href="https://github.com/jackaudio/example-clients/blob/master/simple_client.c">https://github.com/jackaudio/example-clients/blob/master/simple_client.c</link> </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_audio_8h_source_1l00022">22</link> of file <link linkend="_audio_8h_source">audio.h</link>.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classAudioStream_1ab2e106f7e2f70f0cfb1d7b171da71f16"/><section>
    <title>AudioStream()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>AudioStream</primary><secondary>AudioStream</secondary></indexterm>
<indexterm><primary>AudioStream</primary><secondary>AudioStream</secondary></indexterm>
<para><computeroutput>AudioStream::AudioStream ( )</computeroutput></para><para>

<para>Class contructor. In this program, a setConfig is used for implicit initialization. </para>
</para>
<para>
Definition at line <link linkend="_audio_8cpp_source_1l00018">18</link> of file <link linkend="_audio_8cpp_source">audio.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:audiocfg&#32;(<link linkend="_classConfig_1a2d423929da9ed51425ac0cf219b36f5e">Config::getInstance</link>().audconf){
00019 
00020 &#32;&#32;&#32;&#32;client_name=<link linkend="_audio_8cpp_1ab44315834bf3a9a5d29b7752aac6c09b">clientName</link>;
00021 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;nullify&#32;all</emphasis>
00022 &#32;&#32;&#32;&#32;client&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00023 &#32;&#32;&#32;&#32;todevice&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00024 &#32;&#32;&#32;&#32;
00025 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(audiocfg.<link linkend="_structAudioConfig_1ae2854185c92301b90a7775242fe6c629">numChannels</link>.load()&#32;==&#32;1){
00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_ports[1]&#32;=&#32;<emphasis role="keyword">nullptr</emphasis>;
00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputBuffers[1]=<emphasis role="keyword">nullptr</emphasis>;
00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make_sound&#32;=&#32;&amp;<link linkend="_classSine_1abfd05b20115daa6b486ac26c3cb25129">Sine::setMonoSignal</link>;&#32;&#32;<emphasis role="comment">//&#32;Point&#32;to&#32;setMonoSignal&#32;for&#32;processing&#32;1&#32;single&#32;mono&#32;buffer</emphasis>
00029 &#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(audiocfg.<link linkend="_structAudioConfig_1ae2854185c92301b90a7775242fe6c629">numChannels</link>.load()&#32;==&#32;2)&#32;{
00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;make_sound&#32;=&#32;&amp;<link linkend="_classSine_1ae08432c7ada69cff0dd386c1c6b81bf8">Sine::setStereoSignal</link>;&#32;&#32;<emphasis role="comment">//&#32;Point&#32;to&#32;setStereoSignal&#32;for&#32;processing&#32;2&#32;stereo&#32;buffers</emphasis>
00032 &#32;&#32;&#32;&#32;}
00033 }
</programlisting></section>
<anchor xml:id="_classAudioStream_1a480e5d3468bfe9357dd6c40649b1e449"/><section>
    <title>~AudioStream()</title>
<indexterm><primary>~AudioStream</primary><secondary>AudioStream</secondary></indexterm>
<indexterm><primary>AudioStream</primary><secondary>~AudioStream</secondary></indexterm>
<para><computeroutput>AudioStream::~AudioStream ( )</computeroutput></para><para>

<para>class destructor disconnects the client from the server </para>
</para>
<para>
Definition at line <link linkend="_audio_8cpp_source_1l00039">39</link> of file <link linkend="_audio_8cpp_source">audio.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00040 &#32;&#32;&#32;&#32;<link linkend="_classAudioStream_1a86a07551cb80ac8248ad0b1953ffb81d">closeStream</link>();
00041 &#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis role="stringliteral">&quot;Audio&#32;stream&#32;object&#32;destructed&quot;</emphasis>&lt;&lt;std::endl;
00042 }
</programlisting></section>
<anchor xml:id="_classAudioStream_1a2e8501a76d4801c9f91bda8bfba583e4"/><section>
    <title>AudioStream()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>AudioStream</primary><secondary>AudioStream</secondary></indexterm>
<indexterm><primary>AudioStream</primary><secondary>AudioStream</secondary></indexterm>
<para><computeroutput>AudioStream::AudioStream (const <link linkend="_classAudioStream">AudioStream</link> &amp; )<computeroutput>[delete]</computeroutput></computeroutput></para><para>

<para>Copy constructor is deleted to prevent accidental use. </para>
</para>
</section>
<anchor xml:id="_classAudioStream_1aad83ff2805214222217732d8acc76ff9"/><section>
    <title>AudioStream()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>AudioStream</primary><secondary>AudioStream</secondary></indexterm>
<indexterm><primary>AudioStream</primary><secondary>AudioStream</secondary></indexterm>
<para><computeroutput>AudioStream::AudioStream (<link linkend="_classAudioStream">AudioStream</link> &amp;&amp; )<computeroutput>[delete]</computeroutput></computeroutput></para><para>

<para>Move constructor is deleted to prevent accidental use. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classAudioStream_1ab4f577911f9c1b1ae64de56e6b2b96af"/><section>
    <title>clientConnect()</title>
<indexterm><primary>clientConnect</primary><secondary>AudioStream</secondary></indexterm>
<indexterm><primary>AudioStream</primary><secondary>clientConnect</secondary></indexterm>
<para><computeroutput>void AudioStream::clientConnect (std::mutex &amp; mtx, std::condition_variable &amp; cv, bool &amp; serverStarted)</computeroutput></para><para>

<para>Starts a connection to the server and creates the connection graph which connects the inputs with the outputs. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mutex&amp;</entry><entry>
<para>- mutex for synchronization with the server </para>
</entry>
                            </row>
                            <row>
<entry>condition_variable&amp;</entry><entry>
<para>- condition variable for synchronization with the server </para>
</entry>
                            </row>
                            <row>
<entry>bool&amp;</entry><entry>
<para>- boolean indicating whether the server has started </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>void </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_audio_8cpp_source_1l00044">44</link> of file <link linkend="_audio_8cpp_source">audio.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00045 
00046 &#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;<emphasis role="stringliteral">&quot;Waiting&#32;for&#32;jack&#32;server&#32;to&#32;start\n&quot;</emphasis>;
00047 &#32;&#32;&#32;&#32;std::unique_lock&lt;std::mutex&gt;&#32;lock(mtx);
00048 &#32;&#32;&#32;&#32;cv.wait(lock,&#32;[&amp;]&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;serverStarted;&#32;});
00049 
00050 &#32;&#32;&#32;&#32;jack_options_t&#32;options&#32;=&#32;JackNoStartServer;<emphasis role="comment">//(JackSessionID|JackServerName|JackNoStartServer|JackUseExactName|JackNullOption)</emphasis>
00051 &#32;&#32;&#32;&#32;jack_status_t&#32;status;
00052 
00053 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;open&#32;a&#32;client&#32;connection&#32;to&#32;the&#32;JACK&#32;server&#32;*/</emphasis>
00054 &#32;&#32;&#32;&#32;client&#32;=&#32;jack_client_open&#32;(client_name,&#32;options,&#32;&amp;status,<emphasis role="keyword">nullptr</emphasis>);
00055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&amp;&#32;JackNameNotUnique)&#32;{&#32;&#32;&#32;&#32;<emphasis role="comment">//client&#32;name&#32;not&#32;unique,&#32;set&#32;a&#32;client&#32;name;</emphasis>
00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;client_name&#32;=&#32;jack_get_client_name(client);
00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&lt;&lt;<emphasis role="stringliteral">&quot;\t&gt;&gt;unique&#32;name&#32;&quot;</emphasis>&lt;&lt;client_name&lt;&lt;<emphasis role="stringliteral">&quot;&#32;assigned&#32;to&#32;the&#32;client&#32;obj.&quot;</emphasis>&lt;&lt;std::endl;
00058 &#32;&#32;&#32;&#32;}
00059 &#32;&#32;&#32;&#32;
00060 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(client&#32;==&#32;NULL)&#32;{
00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&lt;&lt;<emphasis role="stringliteral">&quot;\t&gt;&gt;jack_client_open()&#32;failed,&#32;status&#32;=&#32;&quot;</emphasis>&lt;&lt;status&lt;&lt;std::endl;
00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&amp;&#32;JackServerFailed)&#32;{
00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&lt;&lt;<emphasis role="stringliteral">&quot;\t&gt;&gt;Unable&#32;to&#32;connect&#32;to&#32;JACK&#32;server&quot;</emphasis>&lt;&lt;std::endl;
00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit&#32;(1);
00066 &#32;&#32;&#32;&#32;}
00067 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(status&#32;&amp;&#32;JackServerStarted)&#32;{
00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis role="stringliteral">&quot;\t&gt;&gt;JACK&#32;server&#32;started&quot;</emphasis>&lt;&lt;std::endl;
00069 &#32;&#32;&#32;&#32;}
00070 
00071 &#32;&#32;&#32;&#32;<emphasis role="comment">//callback</emphasis>
00072 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jack_set_process_callback&#32;(client,streamAudio,<emphasis role="keyword">this</emphasis>)){&#32;<emphasis role="comment">//arg</emphasis>
00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&lt;&lt;<emphasis role="stringliteral">&quot;\t&gt;&gt;Callback&#32;operation&#32;failed&quot;</emphasis>&lt;&lt;std::endl;
00074 &#32;&#32;&#32;&#32;}
00075 
00076 &#32;&#32;&#32;&#32;<emphasis role="comment">//prevent&#32;failure</emphasis>
00077 &#32;&#32;&#32;&#32;jack_on_shutdown(client,&amp;jack_shutdown,0);
00078 
00079 &#32;&#32;&#32;&#32;<emphasis role="comment">//register&#32;physical&#32;ports</emphasis>
00080 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ch=0;&#32;ch&lt;audiocfg.<link linkend="_structAudioConfig_1ae2854185c92301b90a7775242fe6c629">numChannels</link>.load();++ch){
00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;portName&#32;=&#32;(ch%2)&#32;?&#32;(<emphasis role="stringliteral">&quot;PortRight&quot;</emphasis>+std::to_string(ch/2))&#32;:&#32;(<emphasis role="stringliteral">&quot;PortLeft&quot;</emphasis>+std::to_string(ch/2));
00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;std::cout&lt;&lt;&quot;portName&#32;=&#32;&quot;&lt;&lt;portName&lt;&lt;std::endl;</emphasis>
00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_ports[ch]=jack_port_register&#32;(client,portName.c_str(),JACK_DEFAULT_AUDIO_TYPE,&#32;JackPortIsOutput,&#32;0);
00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;output_port_right=jack_port_register&#32;(client,&quot;rightPort&quot;,JACK_DEFAULT_AUDIO_TYPE,&#32;JackPortIsOutput,&#32;0);</emphasis>
00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(output_ports[ch]&#32;==&#32;NULL){
00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&lt;&lt;<emphasis role="stringliteral">&quot;\t&gt;&gt;Unable&#32;to&#32;register&#32;output&#32;port&#32;for&#32;{&quot;</emphasis>&lt;&lt;jack_port_name(output_ports[ch])&lt;&lt;<emphasis role="stringliteral">&quot;}&quot;</emphasis>&lt;&lt;std::endl;
00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit&#32;(1);}
00088 &#32;&#32;&#32;&#32;}
00089 &#32;&#32;&#32;&#32;
00090 &#32;&#32;&#32;&#32;<emphasis role="comment">//activate&#32;client</emphasis>
00091 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jack_activate&#32;(client))&#32;{
00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&lt;&lt;<emphasis role="stringliteral">&quot;\t&gt;&gt;cannot&#32;activate&#32;client&#32;{&quot;</emphasis>&lt;&lt;client_name&lt;&lt;<emphasis role="stringliteral">&quot;}&quot;</emphasis>&lt;&lt;std::endl;
00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit&#32;(1);
00094 &#32;&#32;&#32;&#32;}
00095 
00096 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Getting&#32;acces&#32;to&#32;destination&#32;ports</emphasis>
00097 &#32;&#32;&#32;&#32;todevice&#32;=&#32;jack_get_ports&#32;(client,&#32;NULL,&#32;NULL,&#32;JackPortIsPhysical|JackPortIsInput);
00098 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(todevice&#32;==&#32;NULL)&#32;{
00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&lt;&lt;<emphasis role="stringliteral">&quot;\t&gt;&gt;no&#32;physical&#32;playback&#32;devices&quot;</emphasis>&lt;&lt;std::endl;
00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exit&#32;(1);
00101 &#32;&#32;&#32;&#32;}
00102 
00103 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ch=0;&#32;ch&#32;&lt;audiocfg.<link linkend="_structAudioConfig_1ae2854185c92301b90a7775242fe6c629">numChannels</link>.load();++ch){
00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(output_ports[ch]!=NULL){
00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jack_connect&#32;(client,&#32;jack_port_name(output_ports[ch]),&#32;todevice[ch])){<emphasis role="comment">//returns&#32;full&#32;name</emphasis>
00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&lt;&lt;<emphasis role="stringliteral">&quot;\t&gt;&gt;cannot&#32;connect&#32;left&#32;plysical&#32;output&#32;port&#32;{&quot;</emphasis>&lt;&lt;todevice[ch]&lt;&lt;<emphasis role="stringliteral">&quot;}&#32;with&#32;input&#32;port&#32;{&quot;</emphasis>&lt;&lt;jack_port_name(output_ports[ch])&lt;&lt;<emphasis role="stringliteral">&quot;}&quot;</emphasis>&lt;&lt;std::endl;
00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00109 &#32;&#32;&#32;&#32;}
00110 
00111 &#32;&#32;&#32;&#32;free&#32;(todevice);
00112 }
</programlisting></section>
<anchor xml:id="_classAudioStream_1a86a07551cb80ac8248ad0b1953ffb81d"/><section>
    <title>closeStream()</title>
<indexterm><primary>closeStream</primary><secondary>AudioStream</secondary></indexterm>
<indexterm><primary>AudioStream</primary><secondary>closeStream</secondary></indexterm>
<para><computeroutput>void AudioStream::closeStream ( )</computeroutput></para><para>

<para>Disconnects the client from the server. </para>
</para>

<para><formalpara><title>Returns</title>

<para>void </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_audio_8cpp_source_1l00115">115</link> of file <link linkend="_audio_8cpp_source">audio.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00116 &#32;&#32;&#32;&#32;
00117 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i=0;&#32;i&lt;audiocfg.<link linkend="_structAudioConfig_1ae2854185c92301b90a7775242fe6c629">numChannels</link>.load();++i){
00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jack_port_connected(output_ports[i])){
00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(jack_port_disconnect(client,output_ports[i])){
00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cerr&lt;&lt;<emphasis role="stringliteral">&quot;Couldnt&#32;disconnect&#32;the&#32;&quot;</emphasis>&lt;&lt;jack_port_name(output_ports[i])&lt;&lt;<emphasis role="stringliteral">&quot;&#32;output&#32;port&#32;from&#32;the&#32;main&#32;stream&quot;</emphasis>&lt;&lt;std::endl;
00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
00124 &#32;&#32;&#32;&#32;}
00125 
00126 &#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis role="stringliteral">&quot;Closing&#32;stream&#32;-&#32;turning&#32;off&#32;audio&#32;client..&quot;</emphasis>&lt;&lt;std::endl;
00127 &#32;&#32;&#32;&#32;jack_client_close&#32;(client);
00128 }
</programlisting></section>
<anchor xml:id="_classAudioStream_1aa193e5e2a4946523712422a6503a87c1"/><section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>AudioStream</secondary></indexterm>
<indexterm><primary>AudioStream</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classAudioStream">AudioStream</link> &amp; AudioStream::operator= (<link linkend="_classAudioStream">AudioStream</link> &amp;&amp; )<computeroutput>[delete]</computeroutput></computeroutput></para><para>

<para>Move assignment operator is deleted to prevent accidental use. </para>
</para>
</section>
<anchor xml:id="_classAudioStream_1a012dba5698b8dab4d86d23f531a97181"/><section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>AudioStream</secondary></indexterm>
<indexterm><primary>AudioStream</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classAudioStream">AudioStream</link> &amp; AudioStream::operator= (const <link linkend="_classAudioStream">AudioStream</link> &amp; )<computeroutput>[delete]</computeroutput></computeroutput></para><para>

<para>Copy assignment operator is deleted to prevent accidental use. </para>
</para>
</section>
<anchor xml:id="_classAudioStream_1a0f4ac8181f32c9b1466eb35ed723b167"/><section>
    <title>setVisualizerUpdater()</title>
<indexterm><primary>setVisualizerUpdater</primary><secondary>AudioStream</secondary></indexterm>
<indexterm><primary>AudioStream</primary><secondary>setVisualizerUpdater</secondary></indexterm>
<para><computeroutput>void AudioStream::setVisualizerUpdater (std::function&lt; void(float)&gt; updater)</computeroutput></para><para>

<para>Sets the visualizer updater function. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>std::&lt;void(float)&gt;</entry><entry>
<para>- the visualizer updater function </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>void </para>
</formalpara>
<note><title>Note</title>

<para>The visualizer updater function takes one by one an audio sample as a float parameter to write on the FIFO-based data structures of <link linkend="_classWaveform">Waveform</link> and <link linkend="_classSpectrogram">Spectrogram</link>. </para>
</note>
</para>
<para>
Definition at line <link linkend="_audio_8cpp_source_1l00035">35</link> of file <link linkend="_audio_8cpp_source">audio.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00036 &#32;&#32;&#32;&#32;sine.<link linkend="_classSine_1a4623d350f103d9dafd5ce29908e59332">setVisualizerUpdater</link>(std::move(updater));
00037 }
</programlisting></section>
<anchor xml:id="_classAudioStream_1ac6b5d301d25e74b9b18a58cf5d854385"/><section>
    <title>streamBuffer()</title>
<indexterm><primary>streamBuffer</primary><secondary>AudioStream</secondary></indexterm>
<indexterm><primary>AudioStream</primary><secondary>streamBuffer</secondary></indexterm>
<para><computeroutput>int AudioStream::streamBuffer ( )</computeroutput></para><para>

<para>Member function for streaming the audio buffer. It is a Callback function called implicitly via the static AudioStream::streamAudio function. Inside the function, the sine wave generator is called to fill the audio buffers with the generated sine waves. </para>
</para>

<para><formalpara><title>Returns</title>

<para>int - success message </para>
</formalpara>
</para>
<para>
Definition at line <link linkend="_audio_8cpp_source_1l00130">130</link> of file <link linkend="_audio_8cpp_source">audio.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00131 
00132 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;ch&#32;=&#32;0&#32;;&#32;ch&#32;&lt;&#32;audiocfg.<link linkend="_structAudioConfig_1ae2854185c92301b90a7775242fe6c629">numChannels</link>.load();&#32;++ch){
00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputBuffers[ch]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis>&#32;*<emphasis role="keyword">&gt;</emphasis>(jack_port_get_buffer&#32;(output_ports[ch],&#32;audiocfg.<link linkend="_structAudioConfig_1ae81381142d99bc1845cb33bd048643df">bufferSize</link>.load()&#32;));
00134 &#32;&#32;&#32;&#32;}
00135 &#32;&#32;&#32;&#32;
00136 &#32;&#32;&#32;&#32;(sine.*make_sound)(tone,outputBuffers);&#32;
00137 &#32;&#32;&#32;&#32;
00138 
00139 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
00140 }
</programlisting></section>
<anchor xml:id="_classAudioStream_1a79ba2b085605b367698a204bb28fc6e7"/><section>
    <title>update()</title>
<indexterm><primary>update</primary><secondary>AudioStream</secondary></indexterm>
<indexterm><primary>AudioStream</primary><secondary>update</secondary></indexterm>
<para><computeroutput>void AudioStream::update (int frequency, float volume)</computeroutput></para><para>

<para>Updates the tone member variable with a new frequency and volume. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>int</entry><entry>
<para>frequency - the current frequency of the tone </para>
</entry>
                            </row>
                            <row>
<entry>float</entry><entry>
<para>volume - the volume of the tone </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>void</para>
</formalpara>
Retrieves the minimum and maximum values from the waveform. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="3" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>out</entry><entry>frequency</entry><entry>
<para>The tones spectral frequency. </para>
</entry>
                            </row>
                            <row>
<entry>out</entry><entry>volume</entry><entry>
<para>The volume of the tone. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line <link linkend="_audio_8cpp_source_1l00152">152</link> of file <link linkend="_audio_8cpp_source">audio.cpp</link>.</para>
<programlisting linenumbering="unnumbered">00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
00153 &#32;&#32;&#32;&#32;tone.<link linkend="_structTone_1a8c28a65c858594e410d94921d7abc1fa">frequency</link>.store(frequency);
00154 &#32;&#32;&#32;&#32;tone.<link linkend="_structTone_1ad643b37d799caa83f6a80dc2f001aa4a">volume</link>.store(volume);
00155 }
</programlisting></section>
<para>
The documentation for this class was generated from the following files:</para>
include/<link linkend="_audio_8h">audio.h</link>src/<link linkend="_audio_8cpp">audio.cpp</link></section>
</section>
