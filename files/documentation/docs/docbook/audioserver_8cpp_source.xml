<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_audioserver_8cpp_source" xml:lang="en-US">
<title>audioserver.cpp</title>
<indexterm><primary>src/audioserver.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_audioserver_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;stdio.h&gt;</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;errno.h&gt;</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;unistd.h&gt;</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;stdlib.h&gt;</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;sys/types.h&gt;</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_audioserver_8h">audioserver.h</link>&quot;</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00008"/>00008 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_config_8h">config.h</link>&quot;</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00009"/>00009 
<anchor xml:id="_audioserver_8cpp_source_1l00010"/><link linkend="_classAudioServer_1a805734cde851bf85b3bcb9bc8a76fb9e">00010</link> <link linkend="_classAudioServer_1a805734cde851bf85b3bcb9bc8a76fb9e">AudioServer::AudioServer</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;driverName):driver_name(driverName),audiocfg&#32;(<link linkend="_classConfig">Config</link>::getInstance().audconf){
<anchor xml:id="_audioserver_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;server&#32;=&#32;jackctl_server_create2(NULL,&#32;NULL,&#32;NULL);
<anchor xml:id="_audioserver_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;parameters&#32;=&#32;jackctl_server_get_parameters(server);
<anchor xml:id="_audioserver_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;sigmask&#32;=&#32;jackctl_setup_signals(0);
<anchor xml:id="_audioserver_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;drivers&#32;=&#32;jackctl_server_get_drivers_list(server);
<anchor xml:id="_audioserver_8cpp_source_1l00015"/>00015 
<anchor xml:id="_audioserver_8cpp_source_1l00016"/>00016 }
<anchor xml:id="_audioserver_8cpp_source_1l00017"/>00017 
<anchor xml:id="_audioserver_8cpp_source_1l00018"/><link linkend="_classAudioServer_1ae0e8c5f59aac9a1f4311b262e868cc5a">00018</link> <link linkend="_classAudioServer_1ae0e8c5f59aac9a1f4311b262e868cc5a">AudioServer::~AudioServer</link>(){
<anchor xml:id="_audioserver_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Stopping&#32;server\n&quot;</emphasis>);
<anchor xml:id="_audioserver_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<link linkend="_classAudioServer_1a536a796af0497242444f845df99aba34">stop_server</link>();
<anchor xml:id="_audioserver_8cpp_source_1l00021"/>00021 }
<anchor xml:id="_audioserver_8cpp_source_1l00022"/>00022 
<anchor xml:id="_audioserver_8cpp_source_1l00023"/><link linkend="_classAudioServer_1a19903646817c7d1f3dc2bec8d1f2811e">00023</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classAudioServer_1a19903646817c7d1f3dc2bec8d1f2811e">AudioServer::setup_server</link>(){
<anchor xml:id="_audioserver_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;
<anchor xml:id="_audioserver_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;change_server_parameters();
<anchor xml:id="_audioserver_8cpp_source_1l00026"/>00026 <emphasis role="preprocessor">#ifdef&#32;SERVER_VERBOSE</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;print_driver_info();
<anchor xml:id="_audioserver_8cpp_source_1l00028"/>00028 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;change_ALSAdriver_parameters();
<anchor xml:id="_audioserver_8cpp_source_1l00030"/>00030 }
<anchor xml:id="_audioserver_8cpp_source_1l00031"/><link linkend="_classAudioServer_1a536a796af0497242444f845df99aba34">00031</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classAudioServer_1a536a796af0497242444f845df99aba34">AudioServer::stop_server</link>(){
<anchor xml:id="_audioserver_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n\nShutting&#32;down&#32;server\n\n&quot;</emphasis>);
<anchor xml:id="_audioserver_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;jackctl_server_stop(server);
<anchor xml:id="_audioserver_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;jackctl_server_close(server);
<anchor xml:id="_audioserver_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;jackctl_server_destroy(server);
<anchor xml:id="_audioserver_8cpp_source_1l00036"/>00036 }
<anchor xml:id="_audioserver_8cpp_source_1l00037"/><link linkend="_classAudioServer_1ad727e135d3776ff9a631e47873a6e239">00037</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classAudioServer_1ad727e135d3776ff9a631e47873a6e239">AudioServer::start_server</link>(std::mutex&amp;&#32;mtx,&#32;std::condition_variable&amp;&#32;cv,&#32;<emphasis role="keywordtype">bool</emphasis>&amp;&#32;serverStarted){
<anchor xml:id="_audioserver_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;jackctl_server_open(server,&#32;jackctl_server_get_driver());
<anchor xml:id="_audioserver_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;jackctl_server_start(server);
<anchor xml:id="_audioserver_8cpp_source_1l00040"/>00040 
<anchor xml:id="_audioserver_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Signal&#32;that&#32;server&#32;has&#32;been&#32;started</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;{
<anchor xml:id="_audioserver_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::lock_guard&lt;std::mutex&gt;&#32;lock(mtx);
<anchor xml:id="_audioserver_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;serverStarted&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_audioserver_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;cv.notify_one();
<anchor xml:id="_audioserver_8cpp_source_1l00047"/>00047 
<anchor xml:id="_audioserver_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;jackctl_wait_signals(sigmask);
<anchor xml:id="_audioserver_8cpp_source_1l00049"/>00049 }
<anchor xml:id="_audioserver_8cpp_source_1l00050"/>00050 <emphasis role="keywordtype">void</emphasis>&#32;AudioServer::change_server_parameters(){
<anchor xml:id="_audioserver_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;change&#32;server&#32;param&#32;--&gt;&#32;make&#32;verbose</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;jackctl_parameter_t*&#32;param;
<anchor xml:id="_audioserver_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="keyword">union&#32;</emphasis>jackctl_parameter_value&#32;value;
<anchor xml:id="_audioserver_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;param&#32;=&#32;jackctl_get_parameter(parameters,&#32;<emphasis role="stringliteral">&quot;verbose&quot;</emphasis>);
<anchor xml:id="_audioserver_8cpp_source_1l00055"/>00055 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(param&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_audioserver_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.b&#32;=&#32;<emphasis role="keyword">false</emphasis>;<emphasis role="comment">//true;</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jackctl_parameter_set_value(param,&#32;&amp;value);
<anchor xml:id="_audioserver_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;change&#32;server&#32;param&#32;--&gt;&#32;make&#32;real-time</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;param&#32;=&#32;jackctl_get_parameter(parameters,&#32;<emphasis role="stringliteral">&quot;realtime&quot;</emphasis>);
<anchor xml:id="_audioserver_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(param&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_audioserver_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.b&#32;=&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_audioserver_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jackctl_parameter_set_value(param,&#32;&amp;value);
<anchor xml:id="_audioserver_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Success&#32;on&#32;changing&#32;real&#32;time&quot;</emphasis>);
<anchor xml:id="_audioserver_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;change&#32;server&#32;param&#32;--&gt;&#32;change&#32;real-time&#32;priority</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;param&#32;=&#32;jackctl_get_parameter(parameters,&#32;<emphasis role="stringliteral">&quot;realtime-priority&quot;</emphasis>);
<anchor xml:id="_audioserver_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(param&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_audioserver_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value.b&#32;=&#32;80;
<anchor xml:id="_audioserver_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jackctl_parameter_set_value(param,&#32;&amp;value);
<anchor xml:id="_audioserver_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Success&#32;on&#32;changing&#32;real-time&#32;priority&quot;</emphasis>);
<anchor xml:id="_audioserver_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00073"/>00073 }
<anchor xml:id="_audioserver_8cpp_source_1l00074"/>00074 
<anchor xml:id="_audioserver_8cpp_source_1l00075"/>00075 jackctl_driver_t*&#32;AudioServer::jackctl_server_get_driver()
<anchor xml:id="_audioserver_8cpp_source_1l00076"/>00076 {
<anchor xml:id="_audioserver_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;JSList&#32;*&#32;node_ptr&#32;=&#32;drivers;
<anchor xml:id="_audioserver_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(node_ptr)&#32;{
<anchor xml:id="_audioserver_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(jackctl_driver_get_name(<emphasis role="keyword">static_cast&lt;</emphasis>jackctl_driver_t&#32;*<emphasis role="keyword">&gt;</emphasis>(node_ptr-&gt;data)),&#32;driver_name)&#32;==&#32;0)&#32;{
<anchor xml:id="_audioserver_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(jackctl_driver_t&#32;*)node_ptr-&gt;data;
<anchor xml:id="_audioserver_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_ptr&#32;=&#32;jack_slist_next(node_ptr);
<anchor xml:id="_audioserver_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_audioserver_8cpp_source_1l00085"/>00085 }
<anchor xml:id="_audioserver_8cpp_source_1l00086"/>00086 jackctl_parameter_t*&#32;AudioServer::jackctl_get_parameter(<emphasis role="keyword">const</emphasis>&#32;JSList&#32;*&#32;parameters_list,<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*&#32;parameter_name){
<anchor xml:id="_audioserver_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(parameters_list)
<anchor xml:id="_audioserver_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;{
<anchor xml:id="_audioserver_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(strcmp(jackctl_parameter_get_name(<emphasis role="keyword">static_cast&lt;</emphasis>jackctl_parameter_t&#32;*<emphasis role="keyword">&gt;</emphasis>(parameters_list-&gt;data)),&#32;parameter_name)&#32;==&#32;0)
<anchor xml:id="_audioserver_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="_audioserver_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(jackctl_parameter_t&#32;*)parameters_list-&gt;data;
<anchor xml:id="_audioserver_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parameters_list&#32;=&#32;jack_slist_next(parameters_list);
<anchor xml:id="_audioserver_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
<anchor xml:id="_audioserver_8cpp_source_1l00096"/>00096 }
<anchor xml:id="_audioserver_8cpp_source_1l00097"/>00097 
<anchor xml:id="_audioserver_8cpp_source_1l00098"/>00098 <emphasis role="preprocessor">#ifdef&#32;SERVER_VERBOSE</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00099"/>00099 
<anchor xml:id="_audioserver_8cpp_source_1l00100"/>00100 <emphasis role="keywordtype">void</emphasis>&#32;AudioServer::print_parameters(<emphasis role="keyword">const</emphasis>&#32;JSList&#32;*&#32;node_ptr)
<anchor xml:id="_audioserver_8cpp_source_1l00101"/>00101 {
<anchor xml:id="_audioserver_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(node_ptr&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_audioserver_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jackctl_parameter_t&#32;*&#32;parameter&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>jackctl_parameter_t*<emphasis role="keyword">&gt;</emphasis>(node_ptr-&gt;data);
<anchor xml:id="_audioserver_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\nparameter&#32;name&#32;=&#32;%s\n&quot;</emphasis>,&#32;jackctl_parameter_get_name(parameter));
<anchor xml:id="_audioserver_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;parameter&#32;id&#32;=&#32;%c\n&quot;</emphasis>,&#32;jackctl_parameter_get_id(parameter));
<anchor xml:id="_audioserver_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;parameter&#32;short&#32;decs&#32;=&#32;%s\n&quot;</emphasis>,&#32;jackctl_parameter_get_short_description(parameter));
<anchor xml:id="_audioserver_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;parameter&#32;long&#32;decs&#32;=&#32;%s\n&quot;</emphasis>,&#32;jackctl_parameter_get_long_description(parameter));
<anchor xml:id="_audioserver_8cpp_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_value(jackctl_parameter_get_default_value(parameter),&#32;jackctl_parameter_get_type(parameter));
<anchor xml:id="_audioserver_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_ptr&#32;=&#32;jack_slist_next(node_ptr);
<anchor xml:id="_audioserver_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00111"/>00111 }
<anchor xml:id="_audioserver_8cpp_source_1l00112"/>00112 
<anchor xml:id="_audioserver_8cpp_source_1l00113"/>00113 <emphasis role="keywordtype">void</emphasis>&#32;AudioServer::print_value(<emphasis role="keyword">union</emphasis>&#32;jackctl_parameter_value&#32;value,&#32;jackctl_param_type_t&#32;type){
<anchor xml:id="_audioserver_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(type)&#32;{
<anchor xml:id="_audioserver_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;
<anchor xml:id="_audioserver_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;JackParamInt:
<anchor xml:id="_audioserver_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;parameter&#32;value&#32;=&#32;%d\n&quot;</emphasis>,&#32;value.i);
<anchor xml:id="_audioserver_8cpp_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_audioserver_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_audioserver_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;JackParamUInt:
<anchor xml:id="_audioserver_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;parameter&#32;value&#32;=&#32;%u\n&quot;</emphasis>,&#32;value.ui);
<anchor xml:id="_audioserver_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_audioserver_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_audioserver_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;JackParamChar:
<anchor xml:id="_audioserver_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;parameter&#32;value&#32;=&#32;%c\n&quot;</emphasis>,&#32;value.c);
<anchor xml:id="_audioserver_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_audioserver_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_audioserver_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;JackParamString:
<anchor xml:id="_audioserver_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;parameter&#32;value&#32;=&#32;%s\n&quot;</emphasis>,&#32;value.str);
<anchor xml:id="_audioserver_8cpp_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_audioserver_8cpp_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_audioserver_8cpp_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;JackParamBool:
<anchor xml:id="_audioserver_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;parameter&#32;value&#32;=&#32;%d\n&quot;</emphasis>,&#32;value.b);
<anchor xml:id="_audioserver_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_audioserver_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00136"/>00136 }
<anchor xml:id="_audioserver_8cpp_source_1l00137"/>00137 
<anchor xml:id="_audioserver_8cpp_source_1l00138"/>00138 <emphasis role="keywordtype">void</emphasis>&#32;AudioServer::print_driver_info(){
<anchor xml:id="_audioserver_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;JSList&#32;*&#32;node_ptr&#32;=&#32;drivers;
<anchor xml:id="_audioserver_8cpp_source_1l00140"/>00140 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(node_ptr&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_audioserver_8cpp_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jackctl_driver_t&#32;*driver&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>jackctl_driver_t&#32;*<emphasis role="keyword">&gt;</emphasis>(node_ptr-&gt;data);
<anchor xml:id="_audioserver_8cpp_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(jackctl_driver_get_name(driver),driver_name)){
<anchor xml:id="_audioserver_8cpp_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;\n--------------------------\n&quot;</emphasis>);
<anchor xml:id="_audioserver_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;driver&#32;=&#32;%s\n&quot;</emphasis>,&#32;jackctl_driver_get_name(driver));
<anchor xml:id="_audioserver_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;--------------------------&#32;\n&quot;</emphasis>);
<anchor xml:id="_audioserver_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;print_parameters(jackctl_driver_get_parameters(driver));&#32;
<anchor xml:id="_audioserver_8cpp_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_ptr&#32;=&#32;jack_slist_next(node_ptr);
<anchor xml:id="_audioserver_8cpp_source_1l00149"/>00149 &#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;
<anchor xml:id="_audioserver_8cpp_source_1l00150"/>00150 }
<anchor xml:id="_audioserver_8cpp_source_1l00151"/>00151 <emphasis role="preprocessor">#endif</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00152"/>00152 
<anchor xml:id="_audioserver_8cpp_source_1l00153"/>00153 <emphasis role="keywordtype">void</emphasis>&#32;AudioServer::change_ALSAdriver_parameters(){
<anchor xml:id="_audioserver_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;JSList&#32;*&#32;node_ptr&#32;=&#32;drivers;
<anchor xml:id="_audioserver_8cpp_source_1l00155"/>00155 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(node_ptr&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_audioserver_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_audioserver_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jackctl_driver_t&#32;*driver&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>jackctl_driver_t&#32;*<emphasis role="keyword">&gt;</emphasis>(node_ptr-&gt;data);
<anchor xml:id="_audioserver_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(jackctl_driver_get_name(driver),driver_name)){
<anchor xml:id="_audioserver_8cpp_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;JSList&#32;*&#32;param_ptr&#32;=&#32;jackctl_driver_get_parameters(driver);
<anchor xml:id="_audioserver_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(param_ptr&#32;!=&#32;NULL)&#32;{
<anchor xml:id="_audioserver_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_audioserver_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;jackctl_parameter_t&#32;*&#32;parameter&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>jackctl_parameter_t&#32;*<emphasis role="keyword">&gt;</emphasis>(param_ptr-&gt;data);
<anchor xml:id="_audioserver_8cpp_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;param_name&#32;=&#32;jackctl_parameter_get_name(parameter);
<anchor xml:id="_audioserver_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Configure&#32;sample&#32;rate</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(param_name,<emphasis role="stringliteral">&quot;rate&quot;</emphasis>)){
<anchor xml:id="_audioserver_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;sr&#32;=&#32;audiocfg.<link linkend="_structAudioConfig_1aa893cf0e18009ba2aeb67a105d42aa71">sampleRate</link>.load();
<anchor xml:id="_audioserver_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jackctl_parameter_set_value&#32;(parameter,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">union</emphasis>&#32;jackctl_parameter_value*)&amp;sr)){
<anchor xml:id="_audioserver_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Audioserver::change_ALSAdriver_parameters&#32;:&#32;sample&#32;rate&#32;changed&#32;succesfully&#32;to&#32;%d\n&quot;</emphasis>,sr);
<anchor xml:id="_audioserver_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else{</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;jackctl_parameter_value&#32;jpv&#32;=&#32;jackctl_parameter_get_value(parameter);</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00172"/>00172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;cfg.audconf.sampleRate.store(static_cast&lt;int&gt;(jpv.ui));</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;printf(&quot;Audioserver::change_ALSAdriver_parameters&#32;:&#32;Reconfiguring&#32;sample&#32;rate&#32;to&#32;%d\n&quot;,cfg.audconf.sampleRate.load());</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Configure&#32;device&#32;name</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(param_name,<emphasis role="stringliteral">&quot;device&quot;</emphasis>)){
<anchor xml:id="_audioserver_8cpp_source_1l00178"/>00178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;device_name_str&#32;=&#32;<emphasis role="stringliteral">&quot;hw:&quot;</emphasis>+audiocfg.<link linkend="_structAudioConfig_1a9f06f009be657b8e4197808c765ee56d">audioDevice</link>;
<anchor xml:id="_audioserver_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;device_name&#32;=&#32;device_name_str.c_str();
<anchor xml:id="_audioserver_8cpp_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jackctl_parameter_set_value&#32;(parameter,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">union</emphasis>&#32;jackctl_parameter_value*)device_name&#32;)){
<anchor xml:id="_audioserver_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Audioserver::change_ALSAdriver_parameters&#32;:&#32;device&#32;name&#32;has&#32;changed&#32;to:&#32;%s\n&quot;</emphasis>,device_name);
<anchor xml:id="_audioserver_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else{</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;jackctl_parameter_value&#32;defaultDevice&#32;=&#32;jackctl_parameter_get_default_value(parameter);</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;cfg.audconf.audioDevice&#32;=&#32;defaultDevice.str;</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;printf(&quot;Audioserver::change_ALSAdriver_parameters&#32;:&#32;configuring&#32;default&#32;device&#32;to&#32;:&#32;&#32;%s\n&quot;,cfg.audconf.audioDevice.c_str());</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Configure&#32;buffer&#32;size</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!strcmp(param_name,<emphasis role="stringliteral">&quot;period&quot;</emphasis>)){
<anchor xml:id="_audioserver_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;buffer_size&#32;=&#32;audiocfg.<link linkend="_structAudioConfig_1ae81381142d99bc1845cb33bd048643df">bufferSize</link>.load();
<anchor xml:id="_audioserver_8cpp_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(jackctl_parameter_set_value&#32;(parameter,&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">union</emphasis>&#32;jackctl_parameter_value*)&amp;buffer_size)){
<anchor xml:id="_audioserver_8cpp_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Audioserver::change_ALSAdriver_parameters&#32;:&#32;buffer&#32;size&#32;has&#32;changed&#32;to:&#32;%d&#32;\n&quot;</emphasis>,buffer_size);
<anchor xml:id="_audioserver_8cpp_source_1l00194"/>00194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else{</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;jackctl_parameter_value&#32;jpv&#32;=&#32;jackctl_parameter_get_value(parameter);</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;cfg.audconf.bufferSize.store(static_cast&lt;int&gt;(jpv.ui));</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;printf(&quot;Audioserver::change_ALSAdriver_parameters&#32;:&#32;buffer&#32;size&#32;has&#32;NOT&#32;changed.&#32;Current&#32;buffer&#32;size&#32;value&#32;:&#32;%d&#32;\n&quot;,cfg.audconf.bufferSize.load());</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;}</emphasis>
<anchor xml:id="_audioserver_8cpp_source_1l00200"/>00200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00201"/>00201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;param_ptr&#32;=&#32;jack_slist_next(param_ptr);
<anchor xml:id="_audioserver_8cpp_source_1l00202"/>00202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_audioserver_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;node_ptr&#32;=&#32;jack_slist_next(node_ptr);
<anchor xml:id="_audioserver_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;
<anchor xml:id="_audioserver_8cpp_source_1l00206"/>00206 }
</programlisting></section>
