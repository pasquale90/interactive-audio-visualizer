<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_visualizer_8cpp_source" xml:lang="en-US">
<title>visualizer.cpp</title>
<indexterm><primary>src/visualizer.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_visualizer_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;opencv2/highgui/highgui.hpp&gt;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_visualizer_8h">visualizer.h</link>&quot;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_roi_8h">roi.h</link>&quot;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_tone_8h">tone.h</link>&quot;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00006"/>00006 
<anchor xml:id="_visualizer_8cpp_source_1l00007"/>00007 
<anchor xml:id="_visualizer_8cpp_source_1l00008"/><link linkend="_visualizer_8cpp_1a3f329f01ab431f5a51cdfa2810b5f4db">00008</link> <emphasis role="keyword">constexpr</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_visualizer_8cpp_1a3f329f01ab431f5a51cdfa2810b5f4db">qASCII</link>&#32;{113};&#32;<emphasis role="comment">//&#32;113&#32;q</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00009"/>00009 <emphasis role="comment">//&#32;constexpr&#32;int&#32;spaceASCII&#32;{32};//&#32;32&#32;space</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00010"/>00010 
<anchor xml:id="_visualizer_8cpp_source_1l00011"/><link linkend="_classVisualizer_1a104487003c9fea602e26c072aae27efc">00011</link> <link linkend="_classVisualizer_1a104487003c9fea602e26c072aae27efc">Visualizer::Visualizer</link>(){
<anchor xml:id="_visualizer_8cpp_source_1l00012"/>00012 
<anchor xml:id="_visualizer_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;W=cfg.<link linkend="_classConfig_1ab6692268f819ce3f8474d1d791f3aaee">dispconf</link>.<link linkend="_structDisplayConfig_1a633402e1095e221e678ce55fee7f3f9e">dispResW</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;H=cfg.<link linkend="_classConfig_1ab6692268f819ce3f8474d1d791f3aaee">dispconf</link>.<link linkend="_structDisplayConfig_1ae781f975c0fac0c92d0f1802468ee578">dispResH</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00015"/>00015 
<anchor xml:id="_visualizer_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;cv::namedWindow(<emphasis role="stringliteral">&quot;Interactive&#32;Audio&#32;Visualizer&quot;</emphasis>,cv::WINDOW_AUTOSIZE);
<anchor xml:id="_visualizer_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;cv::Mat&#32;img(&#32;H&#32;,&#32;W,&#32;CV_8UC3,cv::Scalar(0,0,0));
<anchor xml:id="_visualizer_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;visualFrame&#32;=&#32;img;
<anchor xml:id="_visualizer_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;_create_camMask();
<anchor xml:id="_visualizer_8cpp_source_1l00021"/>00021 
<anchor xml:id="_visualizer_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cameraW&#32;=&#32;cfg.<link linkend="_classConfig_1ac0cf8c10aea198ce117dffb91206251c">camconf</link>.<link linkend="_structCameraConfig_1a53d5be43d6362ca145c56a64fe475bb9">camResW</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cameraH&#32;=&#32;cfg.<link linkend="_classConfig_1ac0cf8c10aea198ce117dffb91206251c">camconf</link>.<link linkend="_structCameraConfig_1a5aacf3ba605a2c6bfa6a88b971557fa2">camResH</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;LR&#32;=&#32;W&#32;-&#32;cameraW;
<anchor xml:id="_visualizer_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;TB&#32;=&#32;H&#32;-&#32;cameraH;
<anchor xml:id="_visualizer_8cpp_source_1l00026"/>00026 
<anchor xml:id="_visualizer_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;transpose_ratio_x&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(W)&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(cameraW)&#32;/&#32;2.0f;
<anchor xml:id="_visualizer_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;transpose_ratio_y&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(H)&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(cameraH)&#32;/&#32;2.0f;
<anchor xml:id="_visualizer_8cpp_source_1l00029"/>00029 
<anchor xml:id="_visualizer_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;trackingToggle&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_visualizer_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nfft&#32;=&#32;spectrogram.<link linkend="_classSpectrogram_1a9e2b3f56852a55ce83311d57104b7208">get_numFFTPoints</link>();
<anchor xml:id="_visualizer_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;specMagnitude.reserve(nfft);
<anchor xml:id="_visualizer_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;specMagnitude.resize(nfft);
<anchor xml:id="_visualizer_8cpp_source_1l00035"/>00035 
<anchor xml:id="_visualizer_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;_set_freq_midBoundaries();
<anchor xml:id="_visualizer_8cpp_source_1l00037"/>00037 }
<anchor xml:id="_visualizer_8cpp_source_1l00038"/>00038 
<anchor xml:id="_visualizer_8cpp_source_1l00039"/><link linkend="_classVisualizer_1a2c7e8bfe6cc35f01084ae3aeaae768db">00039</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classVisualizer_1a2c7e8bfe6cc35f01084ae3aeaae768db">Visualizer::setAudiolizerUpdater</link>(std::function&lt;<emphasis role="keywordtype">void</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structRegionOfInterest">RegionOfInterest</link>&amp;,&#32;<link linkend="_structTone">Tone</link>&amp;)&gt;&#32;function){
<anchor xml:id="_visualizer_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;updateAudioLizer&#32;=&#32;std::move(function);
<anchor xml:id="_visualizer_8cpp_source_1l00041"/>00041 }
<anchor xml:id="_visualizer_8cpp_source_1l00042"/>00042 
<anchor xml:id="_visualizer_8cpp_source_1l00043"/>00043 <emphasis role="keywordtype">void</emphasis>&#32;Visualizer::updateTrackingMode(<emphasis role="keywordtype">bool</emphasis>&#32;trackingEnabled){
<anchor xml:id="_visualizer_8cpp_source_1l00044"/>00044 
<anchor xml:id="_visualizer_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(trackingToggle!=trackingEnabled){
<anchor xml:id="_visualizer_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!trackingToggle&#32;&amp;&amp;&#32;trackingEnabled){
<anchor xml:id="_visualizer_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;videoTracker.<link linkend="_classVideoTracker_1af83065f606e3a076307a156c27f71b11">initializeTracker</link>(cameraFrame);
<anchor xml:id="_visualizer_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;trackingToggle&#32;=&#32;trackingEnabled;
<anchor xml:id="_visualizer_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00052"/>00052 
<anchor xml:id="_visualizer_8cpp_source_1l00053"/>00053 }
<anchor xml:id="_visualizer_8cpp_source_1l00054"/>00054 
<anchor xml:id="_visualizer_8cpp_source_1l00055"/><link linkend="_classVisualizer_1a1e2c66042ba2df8011fe934abad95f7b">00055</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classVisualizer_1a1e2c66042ba2df8011fe934abad95f7b">Visualizer::updateAudioSignal</link>(<emphasis role="keywordtype">float</emphasis>&#32;newValue){
<anchor xml:id="_visualizer_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;waveform.<link linkend="_classWaveform_1a6b4f4455a6a8ae2222f967e88b80460b">write</link>(newValue);
<anchor xml:id="_visualizer_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;spectrogram.<link linkend="_classSpectrogram_1ab4f694b0b0fac913263703b588361090">write</link>(newValue);
<anchor xml:id="_visualizer_8cpp_source_1l00058"/>00058 }
<anchor xml:id="_visualizer_8cpp_source_1l00059"/>00059 
<anchor xml:id="_visualizer_8cpp_source_1l00060"/>00060 <emphasis role="keywordtype">void</emphasis>&#32;Visualizer::_create_camMask(){
<anchor xml:id="_visualizer_8cpp_source_1l00061"/>00061 
<anchor xml:id="_visualizer_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cameraW&#32;=&#32;cfg.<link linkend="_classConfig_1ac0cf8c10aea198ce117dffb91206251c">camconf</link>.<link linkend="_structCameraConfig_1a53d5be43d6362ca145c56a64fe475bb9">camResW</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cameraH&#32;=&#32;cfg.<link linkend="_classConfig_1ac0cf8c10aea198ce117dffb91206251c">camconf</link>.<link linkend="_structCameraConfig_1a5aacf3ba605a2c6bfa6a88b971557fa2">camResH</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;W=cfg.<link linkend="_classConfig_1ab6692268f819ce3f8474d1d791f3aaee">dispconf</link>.<link linkend="_structDisplayConfig_1a633402e1095e221e678ce55fee7f3f9e">dispResW</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;H=cfg.<link linkend="_classConfig_1ab6692268f819ce3f8474d1d791f3aaee">dispconf</link>.<link linkend="_structDisplayConfig_1ae781f975c0fac0c92d0f1802468ee578">dispResH</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00066"/>00066 
<anchor xml:id="_visualizer_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calculate&#32;areas</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;r&#32;=&#32;(cameraW&gt;cameraH)&#32;?&#32;cameraH/2&#32;:&#32;cameraW/2;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;r&#32;=&#32;std::min(cameraW&#32;,&#32;cameraH)/2;
<anchor xml:id="_visualizer_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;outArea&#32;=&#32;pow(&#32;2*r,&#32;2&#32;)&#32;-&#32;(M_PI&#32;*&#32;pow(r,2));&#32;//&#32;pow(&#32;2*r,&#32;2&#32;)&#32;is&#32;the&#32;area&#32;of&#32;the&#32;box&#32;(same&#32;center,&#32;2*r&#32;both&#32;edges)&#32;which&#32;is&#32;subtracted&#32;by&#32;the&#32;circle&#32;area&#32;πr^2</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;outArea+=&#32;(abs(cameraW-cameraH)&#32;*&#32;r);&#32;//&#32;abs(cameraW-cameraH)&#32;=&#32;rest&#32;area&#32;outside&#32;the&#32;camera&#32;frame</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00073"/>00073 
<anchor xml:id="_visualizer_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;center_x&#32;=&#32;cameraW/2;
<anchor xml:id="_visualizer_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;center_y&#32;=&#32;cameraH/2;
<anchor xml:id="_visualizer_8cpp_source_1l00076"/>00076 
<anchor xml:id="_visualizer_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;numPointsPerimeter&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(floor((sqrt(2)*(r-1)+4)/2)*8);&#32;&#32;<emphasis role="comment">//&#32;https://stackoverflow.com/a/14995443/15842840</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00078"/>00078 
<anchor xml:id="_visualizer_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;cv::Mat&#32;m1&#32;=&#32;cv::Mat(cameraH,cameraW,&#32;CV_64F,&#32;cv::Scalar(0));&#32;<emphasis role="comment">//&#32;CV_32F</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;camBinaryMask=m1;
<anchor xml:id="_visualizer_8cpp_source_1l00081"/>00081 
<anchor xml:id="_visualizer_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;r&#32;=&#32;cfg.<link linkend="_classConfig_1a91839b9ae92f5503ed43baa71da88fdc">iavconf</link>.<link linkend="_structIAVConfig_1ab61ab68c3f8855d2b5b71c8ffcf9844e">roiRadius</link>;
<anchor xml:id="_visualizer_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;thickness&#32;=&#32;1;
<anchor xml:id="_visualizer_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;circle(&#32;camBinaryMask,
<anchor xml:id="_visualizer_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::Point(center_x,center_y),
<anchor xml:id="_visualizer_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r,
<anchor xml:id="_visualizer_8cpp_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::Scalar(&#32;0,&#32;255,&#32;0&#32;),
<anchor xml:id="_visualizer_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;thickness,
<anchor xml:id="_visualizer_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::LINE_8);
<anchor xml:id="_visualizer_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i=0;i&lt;cameraW;i++){
<anchor xml:id="_visualizer_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j=0;j&lt;cameraH;j++){
<anchor xml:id="_visualizer_8cpp_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;center_dist&#32;=&#32;(float)&#32;sqrt&#32;(&#32;pow((i-center_x),2)&#32;+&#32;pow((j-center_y),2)&#32;);
<anchor xml:id="_visualizer_8cpp_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://stackoverflow.com/a/839931/15842840</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;max&#32;distance&#32;for&#32;each&#32;point&#32;to&#32;normalize&#32;the&#32;distance&#32;between&#32;square&#32;and&#32;circles&#32;perimeter</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;x&#32;=&#32;cx&#32;+&#32;r&#32;*&#32;cos(a)</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;y&#32;=&#32;cy&#32;+&#32;r&#32;*&#32;sin(a)</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;max_dist&#32;=&#32;(float)&#32;sqrt&#32;(&#32;pow((i-center_x),2)&#32;+&#32;pow((j-center_y),2)&#32;);
<anchor xml:id="_visualizer_8cpp_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;condition&#32;=&#32;center_dist&#32;&gt;&#32;(float)r&#32;;
<anchor xml:id="_visualizer_8cpp_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//(x&#32;-&#32;a)**2&#32;+&#32;(y&#32;-&#32;b)**2&#32;==&#32;r**2;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;double&#32;term1&#32;=&#32;(pow((i&#32;-&#32;cameraW/2),2)&#32;+&#32;pow((j&#32;-&#32;cameraH/2),2));</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;double&#32;term2&#32;=&#32;pow(r,2);</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bool&#32;condition2&#32;=&#32;term1&#32;&gt;=&#32;term2;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;bool&#32;condition2&#32;=&#32;(pow((i&#32;-&#32;cameraW/2),2)&#32;+&#32;pow((j&#32;-&#32;cameraH/2),2))&#32;&gt;=&#32;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00108"/>00108 
<anchor xml:id="_visualizer_8cpp_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(condition){
<anchor xml:id="_visualizer_8cpp_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;transparency&#32;=&#32;(center_dist-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(r))/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(sqrt(pow(cameraW-cameraH,2)));
<anchor xml:id="_visualizer_8cpp_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;camBinaryMask.at&lt;<emphasis role="keywordtype">double</emphasis>&gt;(j,i)&#32;=&#32;transparency;
<anchor xml:id="_visualizer_8cpp_source_1l00113"/>00113 
<anchor xml:id="_visualizer_8cpp_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;(max_dist&#32;==&#32;r+4&#32;||&#32;center_dist&#32;==&#32;r+3&#32;||&#32;center_dist&#32;==&#32;r+1&#32;||&#32;center_dist&#32;==&#32;r+2&#32;||&#32;center_dist&#32;==&#32;r){</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(max_dist&#32;==&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(r+4)&#32;||&#32;center_dist&#32;==&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(r+3)&#32;||&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;center_dist&#32;==&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(r+1)&#32;||&#32;center_dist&#32;==&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(r+2)&#32;||&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;center_dist&#32;==&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(r)){
<anchor xml:id="_visualizer_8cpp_source_1l00118"/>00118 
<anchor xml:id="_visualizer_8cpp_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;T&#32;=&#32;(H&#32;-&#32;cameraH)/2;
<anchor xml:id="_visualizer_8cpp_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;L&#32;=&#32;(W&#32;-&#32;cameraW)/2;
<anchor xml:id="_visualizer_8cpp_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;L&#32;+&#32;i;
<anchor xml:id="_visualizer_8cpp_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;T&#32;+&#32;j;
<anchor xml:id="_visualizer_8cpp_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;visualFrame.at&lt;cv::Vec3b&gt;(y,x)[0]&#32;=&#32;137;
<anchor xml:id="_visualizer_8cpp_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;visualFrame.at&lt;cv::Vec3b&gt;(y,x)[1]&#32;=&#32;137;
<anchor xml:id="_visualizer_8cpp_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;visualFrame.at&lt;cv::Vec3b&gt;(y,x)[2]&#32;=&#32;137;
<anchor xml:id="_visualizer_8cpp_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00129"/>00129 &#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00130"/>00130 }
<anchor xml:id="_visualizer_8cpp_source_1l00131"/>00131 
<anchor xml:id="_visualizer_8cpp_source_1l00132"/>00132 <emphasis role="keywordtype">void</emphasis>&#32;Visualizer::_set_freq_midBoundaries(){
<anchor xml:id="_visualizer_8cpp_source_1l00133"/>00133 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;set&#32;mid&#32;frequencies</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00134"/>00134 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;minFreq&#32;&#32;=&#32;cfg.<link linkend="_classConfig_1a91839b9ae92f5503ed43baa71da88fdc">iavconf</link>.<link linkend="_structIAVConfig_1ad171cfdbc06a2403eb3dad6636a59cf0">minFrequency</link>;
<anchor xml:id="_visualizer_8cpp_source_1l00135"/>00135 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxFreq&#32;=&#32;cfg.<link linkend="_classConfig_1a91839b9ae92f5503ed43baa71da88fdc">iavconf</link>.<link linkend="_structIAVConfig_1a00eb72c5d6c59eb3d3308bdb1d337a10">maxFrequency</link>;
<anchor xml:id="_visualizer_8cpp_source_1l00136"/>00136 
<anchor xml:id="_visualizer_8cpp_source_1l00137"/>00137 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;frange&#32;=&#32;maxFreq&#32;-&#32;minFreq;
<anchor xml:id="_visualizer_8cpp_source_1l00138"/>00138 &#32;&#32;&#32;&#32;leftMidFreq&#32;&#32;=&#32;minFreq&#32;+&#32;(frange/3);
<anchor xml:id="_visualizer_8cpp_source_1l00139"/>00139 &#32;&#32;&#32;&#32;rightMidFreq&#32;=&#32;minFreq&#32;+&#32;(2*frange/3);
<anchor xml:id="_visualizer_8cpp_source_1l00140"/>00140 }
<anchor xml:id="_visualizer_8cpp_source_1l00141"/>00141 
<anchor xml:id="_visualizer_8cpp_source_1l00142"/><link linkend="_classVisualizer_1a968f280b3f09b86105bc662021babbe9">00142</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classVisualizer_1a968f280b3f09b86105bc662021babbe9">Visualizer::broadcast</link>(){
<anchor xml:id="_visualizer_8cpp_source_1l00143"/>00143 
<anchor xml:id="_visualizer_8cpp_source_1l00144"/>00144 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;trackingEnabled,trackingUpdated;
<anchor xml:id="_visualizer_8cpp_source_1l00145"/>00145 &#32;&#32;&#32;&#32;<link linkend="_structRegionOfInterest">RegionOfInterest</link>&#32;trackingSig;
<anchor xml:id="_visualizer_8cpp_source_1l00146"/>00146 &#32;&#32;&#32;&#32;<link linkend="_structTone">Tone</link>&#32;tone;
<anchor xml:id="_visualizer_8cpp_source_1l00147"/>00147 
<anchor xml:id="_visualizer_8cpp_source_1l00148"/>00148 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>(<emphasis role="keyword">true</emphasis>){
<anchor xml:id="_visualizer_8cpp_source_1l00149"/>00149 
<anchor xml:id="_visualizer_8cpp_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;camera&#32;in&#32;visualizer</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00151"/>00151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;frameElapsed&#32;=&#32;camera.<link linkend="_classCamera_1abf92424200235ed48ec2d7135f02127e">capture</link>(cameraFrame);&#32;<emphasis role="comment">//&#32;get&#32;data</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00152"/>00152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!frameElapsed){
<anchor xml:id="_visualizer_8cpp_source_1l00153"/>00153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
<anchor xml:id="_visualizer_8cpp_source_1l00154"/>00154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00155"/>00155 
<anchor xml:id="_visualizer_8cpp_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;remaining_percentage;
<anchor xml:id="_visualizer_8cpp_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;trackingEnabled&#32;=&#32;trigger.<link linkend="_classTrigger_1a0f1b544e6fdc6ed75b2888113fc413a2">isTrackingEnabled</link>(remaining_percentage);
<anchor xml:id="_visualizer_8cpp_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updateTrackingMode(trackingEnabled);
<anchor xml:id="_visualizer_8cpp_source_1l00159"/>00159 
<anchor xml:id="_visualizer_8cpp_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(trackingEnabled){&#32;<emphasis role="comment">//&#32;preprocess&#32;visual_frame&#32;--&gt;&#32;&#32;&#32;doesn&apos;t&#32;depict&#32;the&#32;frame,&#32;it&#32;just&#32;edits&#32;it&#32;so&#32;it&#32;does&#32;not&#32;require&#32;a&#32;new&#32;frame&#32;to&#32;be&#32;captured&#32;by&#32;the&#32;camera.</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;trackingUpdated&#32;=&#32;videoTracker.<link linkend="_classVideoTracker_1a548651167191b0d3f5e69d252e3f30da">trackObject</link>(cameraFrame,&#32;trackingSig);
<anchor xml:id="_visualizer_8cpp_source_1l00163"/>00163 
<anchor xml:id="_visualizer_8cpp_source_1l00164"/>00164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!trackingUpdated){
<anchor xml:id="_visualizer_8cpp_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;reset</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;trigger.<link linkend="_classTrigger_1a465a643de1ace6e23b5d4e0f8c94d5a0">reset</link>();
<anchor xml:id="_visualizer_8cpp_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00168"/>00168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;update&#32;the&#32;current&#32;visualframe&#32;according&#32;to&#32;the&#32;changing&#32;of&#32;the&#32;tracking&#32;stimulus</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_set_BG_manually(tone);
<anchor xml:id="_visualizer_8cpp_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_set_FG_manually(trackingSig);
<anchor xml:id="_visualizer_8cpp_source_1l00172"/>00172 
<anchor xml:id="_visualizer_8cpp_source_1l00173"/>00173 
<anchor xml:id="_visualizer_8cpp_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>{
<anchor xml:id="_visualizer_8cpp_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_setToCamera(remaining_percentage);
<anchor xml:id="_visualizer_8cpp_source_1l00176"/>00176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;trackingUpdated&#32;=&#32;trackingEnabled&#32;=&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_visualizer_8cpp_source_1l00177"/>00177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00178"/>00178 
<anchor xml:id="_visualizer_8cpp_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updateAudioLizer(trackingUpdated,&#32;trackingEnabled,&#32;trackingSig,&#32;tone);
<anchor xml:id="_visualizer_8cpp_source_1l00180"/>00180 
<anchor xml:id="_visualizer_8cpp_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exit_msg&#32;=&#32;_showFrame();
<anchor xml:id="_visualizer_8cpp_source_1l00182"/>00182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(exit_msg)
<anchor xml:id="_visualizer_8cpp_source_1l00183"/>00183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="_visualizer_8cpp_source_1l00184"/>00184 &#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00185"/>00185 }
<anchor xml:id="_visualizer_8cpp_source_1l00186"/>00186 
<anchor xml:id="_visualizer_8cpp_source_1l00187"/><link linkend="_classVisualizer_1a013ec3101407fbe4805f289bc32d1265">00187</link> <link linkend="_classVisualizer_1a013ec3101407fbe4805f289bc32d1265">Visualizer::~Visualizer</link>(){
<anchor xml:id="_visualizer_8cpp_source_1l00188"/>00188 &#32;&#32;&#32;&#32;cv::destroyWindow(<emphasis role="stringliteral">&quot;Interactive&#32;Audio&#32;Visualizer&quot;</emphasis>);&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00189"/>00189 &#32;&#32;&#32;&#32;visualFrame.release();
<anchor xml:id="_visualizer_8cpp_source_1l00190"/>00190 &#32;&#32;&#32;&#32;cameraFrame.release();
<anchor xml:id="_visualizer_8cpp_source_1l00191"/>00191 &#32;&#32;&#32;&#32;camBinaryMask.release();
<anchor xml:id="_visualizer_8cpp_source_1l00192"/>00192 }
<anchor xml:id="_visualizer_8cpp_source_1l00193"/>00193 
<anchor xml:id="_visualizer_8cpp_source_1l00194"/>00194 <emphasis role="keywordtype">bool</emphasis>&#32;Visualizer::_showFrame(){&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00195"/>00195 &#32;&#32;&#32;&#32;cv::imshow(<emphasis role="stringliteral">&quot;Interactive&#32;Audio&#32;Visualizer&quot;</emphasis>,&#32;visualFrame);
<anchor xml:id="_visualizer_8cpp_source_1l00196"/>00196 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;msg&#32;=&#32;cv::waitKey(1);
<anchor xml:id="_visualizer_8cpp_source_1l00197"/>00197 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(msg&#32;==&#32;<link linkend="_visualizer_8cpp_1a3f329f01ab431f5a51cdfa2810b5f4db">qASCII</link>)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00198"/>00198 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;if&#32;(cfg.iavconf.trigger==&quot;Manual&quot;&#32;&amp;&amp;&#32;msg&#32;==&#32;spaceASCII)&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00199"/>00199 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_visualizer_8cpp_source_1l00200"/>00200 }
<anchor xml:id="_visualizer_8cpp_source_1l00201"/>00201 
<anchor xml:id="_visualizer_8cpp_source_1l00202"/>00202 <emphasis role="keywordtype">void</emphasis>&#32;Visualizer::_set_BG_manually(<link linkend="_structTone">Tone</link>&#32;&amp;tone){
<anchor xml:id="_visualizer_8cpp_source_1l00203"/>00203 
<anchor xml:id="_visualizer_8cpp_source_1l00204"/>00204 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;frequency&#32;=&#32;tone.<link linkend="_structTone_1a8c28a65c858594e410d94921d7abc1fa">frequency</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00205"/>00205 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;volume&#32;=&#32;tone.<link linkend="_structTone_1ad643b37d799caa83f6a80dc2f001aa4a">volume</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00206"/>00206 
<anchor xml:id="_visualizer_8cpp_source_1l00207"/>00207 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;percent;
<anchor xml:id="_visualizer_8cpp_source_1l00208"/>00208 
<anchor xml:id="_visualizer_8cpp_source_1l00209"/>00209 &#32;&#32;&#32;&#32;B&#32;=&#32;G&#32;=&#32;R&#32;=&#32;0;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00210"/>00210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frequency&gt;&#32;cfg.<link linkend="_classConfig_1a91839b9ae92f5503ed43baa71da88fdc">iavconf</link>.<link linkend="_structIAVConfig_1ad171cfdbc06a2403eb3dad6636a59cf0">minFrequency</link>&#32;&amp;&amp;&#32;frequency&lt;=leftMidFreq){&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;keep&#32;blue&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;percent&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(frequency)/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(leftMidFreq);&#32;&#32;<emphasis role="comment">//&#32;high&#32;trans</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;B&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(255.f&#32;*&#32;volume&#32;);
<anchor xml:id="_visualizer_8cpp_source_1l00213"/>00213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;G&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(255.f&#32;*&#32;percent);
<anchor xml:id="_visualizer_8cpp_source_1l00214"/>00214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;R&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(255.f&#32;*&#32;(1.-percent));
<anchor xml:id="_visualizer_8cpp_source_1l00215"/>00215 &#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00216"/>00216 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frequency&#32;&gt;leftMidFreq&#32;&amp;&amp;&#32;frequency&#32;&lt;=&#32;rightMidFreq){&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;keep&#32;green</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;percent&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(frequency)/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(rightMidFreq);&#32;<emphasis role="comment">//&#32;low&#32;trans</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;B&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(255.f&#32;*&#32;percent);
<anchor xml:id="_visualizer_8cpp_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;G&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(255.f&#32;*&#32;volume);
<anchor xml:id="_visualizer_8cpp_source_1l00220"/>00220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;R&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(255.*(1.-percent));
<anchor xml:id="_visualizer_8cpp_source_1l00221"/>00221 &#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00222"/>00222 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frequency&#32;&gt;&#32;rightMidFreq&#32;&amp;&amp;&#32;frequency&#32;&lt;=&#32;cfg.<link linkend="_classConfig_1a91839b9ae92f5503ed43baa71da88fdc">iavconf</link>.<link linkend="_structIAVConfig_1a00eb72c5d6c59eb3d3308bdb1d337a10">maxFrequency</link>)&#32;{&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;keep&#32;red</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;percent&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(frequency)/<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(cfg.<link linkend="_classConfig_1a91839b9ae92f5503ed43baa71da88fdc">iavconf</link>.<link linkend="_structIAVConfig_1a00eb72c5d6c59eb3d3308bdb1d337a10">maxFrequency</link>);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;B&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(255.*percent);
<anchor xml:id="_visualizer_8cpp_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;G&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(255.*(1.-percent));
<anchor xml:id="_visualizer_8cpp_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;R&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(255.f&#32;*&#32;volume);
<anchor xml:id="_visualizer_8cpp_source_1l00227"/>00227 &#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00228"/>00228 &#32;&#32;&#32;&#32;visualFrame.setTo(&#32;cv::Scalar(&#32;B,&#32;G,&#32;R&#32;)&#32;);
<anchor xml:id="_visualizer_8cpp_source_1l00229"/>00229 }
<anchor xml:id="_visualizer_8cpp_source_1l00230"/>00230 
<anchor xml:id="_visualizer_8cpp_source_1l00231"/>00231 <emphasis role="keywordtype">void</emphasis>&#32;Visualizer::drawSmallcircle(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structRegionOfInterest">RegionOfInterest</link>&#32;&amp;roi){
<anchor xml:id="_visualizer_8cpp_source_1l00232"/>00232 
<anchor xml:id="_visualizer_8cpp_source_1l00233"/>00233 
<anchor xml:id="_visualizer_8cpp_source_1l00234"/>00234 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;W=cfg.<link linkend="_classConfig_1ab6692268f819ce3f8474d1d791f3aaee">dispconf</link>.<link linkend="_structDisplayConfig_1a633402e1095e221e678ce55fee7f3f9e">dispResW</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00235"/>00235 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;H=cfg.<link linkend="_classConfig_1ab6692268f819ce3f8474d1d791f3aaee">dispconf</link>.<link linkend="_structDisplayConfig_1ae781f975c0fac0c92d0f1802468ee578">dispResH</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00236"/>00236 &#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00237"/>00237 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;roicenterX&#32;=&#32;roi.<link linkend="_structRegionOfInterest_1a7c05ee763a1dbcea5d7722c8611e6bc7">centerX</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00238"/>00238 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;roicenterY&#32;=&#32;roi.<link linkend="_structRegionOfInterest_1a9a5c08c619eb5383833aabae962490df">centerY</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00239"/>00239 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;roiVolumeW&#32;=&#32;roi.<link linkend="_structRegionOfInterest_1a0272d3fbebc59f034dd2de9e89d50598">volumeW</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00240"/>00240 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;roiVolumeH&#32;=&#32;roi.<link linkend="_structRegionOfInterest_1a33377fff7783a831c2b373c2194e7afb">volumeH</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00241"/>00241 
<anchor xml:id="_visualizer_8cpp_source_1l00242"/>00242 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;center_x&#32;=&#32;LR/2&#32;+&#32;roicenterX;&#32;<emphasis role="comment">//&#32;&#32;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00243"/>00243 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;center_y&#32;=&#32;TB/2&#32;+&#32;roicenterY;&#32;<emphasis role="comment">//&#32;H/2;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00244"/>00244 
<anchor xml:id="_visualizer_8cpp_source_1l00245"/>00245 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;center_x&#32;&lt;&#32;W/2&#32;)&#32;<emphasis role="comment">//-W*2/3)</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00246"/>00246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;center_x&#32;-=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(transpose_ratio_x&#32;*&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(W)&#32;/&#32;2.0f&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(center_x)));
<anchor xml:id="_visualizer_8cpp_source_1l00247"/>00247 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;center_x&#32;&gt;&#32;W/2)&#32;<emphasis role="comment">//*2/3)</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00248"/>00248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;center_x&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(transpose_ratio_x&#32;*&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(center_x)&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(W)&#32;/&#32;2.0f));
<anchor xml:id="_visualizer_8cpp_source_1l00249"/>00249 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;center_y&#32;&lt;&#32;H/2&#32;)
<anchor xml:id="_visualizer_8cpp_source_1l00250"/>00250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;center_y&#32;-=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(transpose_ratio_y&#32;*&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(H)&#32;/&#32;2.0f&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(center_y)));
<anchor xml:id="_visualizer_8cpp_source_1l00251"/>00251 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(&#32;center_y&#32;&gt;&#32;H/2&#32;)
<anchor xml:id="_visualizer_8cpp_source_1l00252"/>00252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;center_y&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(transpose_ratio_y&#32;*&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(center_y)&#32;-&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(H)&#32;/&#32;2.0f));
<anchor xml:id="_visualizer_8cpp_source_1l00253"/>00253 
<anchor xml:id="_visualizer_8cpp_source_1l00254"/>00254 &#32;&#32;&#32;&#32;cv::Point&#32;center(W&#32;-&#32;center_x,&#32;center_y);<emphasis role="comment">//Declaring&#32;the&#32;center&#32;point&#32;-&#32;Reflect&#32;horizontally</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00255"/>00255 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;radius&#32;=&#32;roiVolumeW&#32;&gt;&#32;roiVolumeH&#32;?&#32;roiVolumeW/2&#32;:&#32;roiVolumeH/2;&#32;<emphasis role="comment">//Declaring&#32;the&#32;radius</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00256"/>00256 &#32;&#32;&#32;&#32;cv::Scalar&#32;line_Color(0,&#32;0,&#32;0);<emphasis role="comment">//Color&#32;of&#32;the&#32;circle</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00257"/>00257 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;thickness&#32;=&#32;2;<emphasis role="comment">//thickens&#32;of&#32;the&#32;line</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00258"/>00258 &#32;&#32;&#32;&#32;circle(visualFrame,&#32;center,radius,&#32;line_Color,&#32;thickness);<emphasis role="comment">//Using&#32;circle()functi</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00259"/>00259 
<anchor xml:id="_visualizer_8cpp_source_1l00260"/>00260 }
<anchor xml:id="_visualizer_8cpp_source_1l00261"/>00261 
<anchor xml:id="_visualizer_8cpp_source_1l00262"/>00262 <emphasis role="keywordtype">void</emphasis>&#32;Visualizer::draWaveform(){
<anchor xml:id="_visualizer_8cpp_source_1l00263"/>00263 
<anchor xml:id="_visualizer_8cpp_source_1l00264"/>00264 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;W=cfg.<link linkend="_classConfig_1ab6692268f819ce3f8474d1d791f3aaee">dispconf</link>.<link linkend="_structDisplayConfig_1a633402e1095e221e678ce55fee7f3f9e">dispResW</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00265"/>00265 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;H=cfg.<link linkend="_classConfig_1ab6692268f819ce3f8474d1d791f3aaee">dispconf</link>.<link linkend="_structDisplayConfig_1ae781f975c0fac0c92d0f1802468ee578">dispResH</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00266"/>00266 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cameraW&#32;=&#32;cfg.<link linkend="_classConfig_1ac0cf8c10aea198ce117dffb91206251c">camconf</link>.<link linkend="_structCameraConfig_1a53d5be43d6362ca145c56a64fe475bb9">camResW</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00267"/>00267 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cameraH&#32;=&#32;cfg.<link linkend="_classConfig_1ac0cf8c10aea198ce117dffb91206251c">camconf</link>.<link linkend="_structCameraConfig_1a5aacf3ba605a2c6bfa6a88b971557fa2">camResH</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00268"/>00268 
<anchor xml:id="_visualizer_8cpp_source_1l00269"/>00269 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;x_centre&#32;=&#32;W/2;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00270"/>00270 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;y_centre&#32;=&#32;H/2;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00271"/>00271 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;r&#32;=&#32;(cameraW&gt;cameraH)&#32;?&#32;cameraH/2&#32;:&#32;cameraW/2;
<anchor xml:id="_visualizer_8cpp_source_1l00272"/>00272 
<anchor xml:id="_visualizer_8cpp_source_1l00273"/>00273 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;minMax[2];
<anchor xml:id="_visualizer_8cpp_source_1l00274"/>00274 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;numSamples;
<anchor xml:id="_visualizer_8cpp_source_1l00275"/>00275 &#32;&#32;&#32;&#32;waveform.<link linkend="_classWaveform_1a57d9f5fae074ff6e3d7d1f687442e427">getMinMax</link>(minMax);
<anchor xml:id="_visualizer_8cpp_source_1l00276"/>00276 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;min&#32;=&#32;minMax[0],max&#32;=&#32;minMax[1];
<anchor xml:id="_visualizer_8cpp_source_1l00277"/>00277 &#32;&#32;&#32;&#32;numSamples&#32;=&#32;waveform.<link linkend="_classWaveform_1affe280dcbbde4ed935db6ad3f5d6cc80">availableForReading</link>();
<anchor xml:id="_visualizer_8cpp_source_1l00278"/>00278 
<anchor xml:id="_visualizer_8cpp_source_1l00279"/>00279 
<anchor xml:id="_visualizer_8cpp_source_1l00280"/>00280 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;depict&#32;waveform</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00281"/>00281 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;end;
<anchor xml:id="_visualizer_8cpp_source_1l00282"/>00282 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;curRadians=0.0;
<anchor xml:id="_visualizer_8cpp_source_1l00283"/>00283 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;radianStep=2*<link linkend="_sine_8cpp_1ae71449b1cc6e6250b91f539153a7a0d3">M_PI</link>&#32;/&#32;(double)numPointsPerimeter;
<anchor xml:id="_visualizer_8cpp_source_1l00284"/>00284 
<anchor xml:id="_visualizer_8cpp_source_1l00285"/>00285 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(numSamples&lt;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(numPointsPerimeter)){
<anchor xml:id="_visualizer_8cpp_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;end=numSamples;
<anchor xml:id="_visualizer_8cpp_source_1l00287"/>00287 &#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>&#32;end&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(numPointsPerimeter);
<anchor xml:id="_visualizer_8cpp_source_1l00288"/>00288 
<anchor xml:id="_visualizer_8cpp_source_1l00289"/>00289 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;thickness=1;
<anchor xml:id="_visualizer_8cpp_source_1l00290"/>00290 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;x1,x2,y1,y2;
<anchor xml:id="_visualizer_8cpp_source_1l00291"/>00291 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;percent;
<anchor xml:id="_visualizer_8cpp_source_1l00292"/>00292 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;new_radius;
<anchor xml:id="_visualizer_8cpp_source_1l00293"/>00293 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;waveVal;
<anchor xml:id="_visualizer_8cpp_source_1l00294"/>00294 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i=0;&#32;i&lt;end&#32;;&#32;i++){
<anchor xml:id="_visualizer_8cpp_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00296"/>00296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;pixels&#32;are&#32;calculated&#32;given&#32;the&#32;following&#32;equations:</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00297"/>00297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;x&#32;=&#32;cx&#32;+&#32;r&#32;*&#32;cos(a)</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00298"/>00298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;y&#32;=&#32;cy&#32;+&#32;r&#32;*&#32;sin(a)</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x1&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>((float)r&#32;*&#32;std::cos(curRadians)&#32;+&#32;(float)x_centre);
<anchor xml:id="_visualizer_8cpp_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y1&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>((float)r&#32;*&#32;std::sin(curRadians)&#32;+&#32;(float)y_centre);
<anchor xml:id="_visualizer_8cpp_source_1l00301"/>00301 &#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;waveform.<link linkend="_classWaveform_1ad4309d03c34e0b7ebe173ee8bd536116">read</link>(waveVal);
<anchor xml:id="_visualizer_8cpp_source_1l00303"/>00303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;normalize&#32;in&#32;range&#32;[-1&#32;1]</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;percent&#32;=&#32;2*&#32;(&#32;(waveVal-min)&#32;/&#32;(max-min)&#32;)&#32;-1;
<anchor xml:id="_visualizer_8cpp_source_1l00305"/>00305 
<anchor xml:id="_visualizer_8cpp_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;trasport&#32;x&#32;and&#32;y</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;new_radius&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(r&#32;+&#32;((float)H&#32;/&#32;40.&#32;*&#32;percent));
<anchor xml:id="_visualizer_8cpp_source_1l00308"/>00308 
<anchor xml:id="_visualizer_8cpp_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x2&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(new_radius&#32;*&#32;std::cos(curRadians)&#32;+&#32;(float)x_centre);
<anchor xml:id="_visualizer_8cpp_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;y2&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(new_radius&#32;*&#32;std::sin(curRadians)&#32;+&#32;(float)y_centre);
<anchor xml:id="_visualizer_8cpp_source_1l00311"/>00311 
<anchor xml:id="_visualizer_8cpp_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::Point&#32;p1(x1,&#32;y1),&#32;p2(x2,&#32;y2);&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00313"/>00313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cv::line(visualFrame,&#32;p1,&#32;p2,&#32;cv::Scalar(255,&#32;0,&#32;0),&#32;thickness,&#32;cv::LINE_8);&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00314"/>00314 
<anchor xml:id="_visualizer_8cpp_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;curRadians+=radianStep;
<anchor xml:id="_visualizer_8cpp_source_1l00316"/>00316 &#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00317"/>00317 &#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00318"/>00318 }
<anchor xml:id="_visualizer_8cpp_source_1l00319"/>00319 
<anchor xml:id="_visualizer_8cpp_source_1l00320"/>00320 <emphasis role="keywordtype">void</emphasis>&#32;Visualizer::_set_FG_manually(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structRegionOfInterest">RegionOfInterest</link>&#32;&amp;roi){
<anchor xml:id="_visualizer_8cpp_source_1l00321"/>00321 
<anchor xml:id="_visualizer_8cpp_source_1l00322"/>00322 &#32;&#32;&#32;&#32;drawSmallcircle(roi);
<anchor xml:id="_visualizer_8cpp_source_1l00323"/>00323 &#32;&#32;&#32;&#32;draWaveform();
<anchor xml:id="_visualizer_8cpp_source_1l00324"/>00324 &#32;&#32;&#32;&#32;drawSpectrogram();
<anchor xml:id="_visualizer_8cpp_source_1l00325"/>00325 &#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00326"/>00326 }
<anchor xml:id="_visualizer_8cpp_source_1l00327"/>00327 
<anchor xml:id="_visualizer_8cpp_source_1l00328"/>00328 <emphasis role="keywordtype">void</emphasis>&#32;Visualizer::_show_timer(<emphasis role="keywordtype">float</emphasis>&#32;percent)&#32;{
<anchor xml:id="_visualizer_8cpp_source_1l00329"/>00329 &#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00330"/>00330 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;cameraFrame.cols&#32;/&#32;2;
<anchor xml:id="_visualizer_8cpp_source_1l00331"/>00331 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;cameraFrame.rows&#32;/&#32;2;
<anchor xml:id="_visualizer_8cpp_source_1l00332"/>00332 
<anchor xml:id="_visualizer_8cpp_source_1l00333"/>00333 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;radius&#32;=&#32;cfg.<link linkend="_classConfig_1a91839b9ae92f5503ed43baa71da88fdc">iavconf</link>.<link linkend="_structIAVConfig_1ab61ab68c3f8855d2b5b71c8ffcf9844e">roiRadius</link>;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00334"/>00334 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;thickness&#32;=&#32;3;
<anchor xml:id="_visualizer_8cpp_source_1l00335"/>00335 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;angle&#32;=&#32;percent&#32;*&#32;360.0f;
<anchor xml:id="_visualizer_8cpp_source_1l00336"/>00336 &#32;&#32;&#32;&#32;cv::circle(cameraFrame,&#32;cv::Point(x,&#32;y),&#32;radius,&#32;CV_RGB(245,&#32;245,&#32;245),&#32;thickness);
<anchor xml:id="_visualizer_8cpp_source_1l00337"/>00337 
<anchor xml:id="_visualizer_8cpp_source_1l00338"/>00338 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;r&#32;=&#32;255&#32;-&#32;(millisecondsElapsed&#32;*&#32;5)&#32;%&#32;255;&#32;&#32;//&#32;Gradually&#32;change&#32;the&#32;color&#32;to&#32;orange/yellow</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00339"/>00339 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;g&#32;=&#32;(millisecondsElapsed&#32;*&#32;2)&#32;%&#32;255;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00340"/>00340 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int&#32;b&#32;=&#32;(millisecondsElapsed&#32;*&#32;4)&#32;%&#32;255;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00341"/>00341 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;r&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(127.5&#32;*&#32;(1&#32;+&#32;sin(angle&#32;*&#32;<link linkend="_sine_8cpp_1ae71449b1cc6e6250b91f539153a7a0d3">M_PI</link>&#32;/&#32;180.0)));&#32;&#32;<emphasis role="comment">//&#32;Sinusoidal&#32;for&#32;red</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00342"/>00342 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;g&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(127.5&#32;*&#32;(1&#32;+&#32;sin((angle&#32;+&#32;120)&#32;*&#32;<link linkend="_sine_8cpp_1ae71449b1cc6e6250b91f539153a7a0d3">M_PI</link>&#32;/&#32;180.0)));&#32;&#32;<emphasis role="comment">//&#32;Sinusoidal&#32;for&#32;green</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00343"/>00343 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;b&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(127.5&#32;*&#32;(1&#32;+&#32;sin((angle&#32;+&#32;240)&#32;*&#32;<link linkend="_sine_8cpp_1ae71449b1cc6e6250b91f539153a7a0d3">M_PI</link>&#32;/&#32;180.0)));&#32;&#32;<emphasis role="comment">//&#32;Sinusoidal&#32;for&#32;blue</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00344"/>00344 
<anchor xml:id="_visualizer_8cpp_source_1l00345"/>00345 &#32;&#32;&#32;&#32;cv::ellipse(cameraFrame,&#32;cv::Point(x,&#32;y),&#32;cv::Size(radius,&#32;radius),&#32;0,&#32;-90,&#32;-90&#32;+&#32;angle,&#32;CV_RGB(r,&#32;g,&#32;b),&#32;thickness);
<anchor xml:id="_visualizer_8cpp_source_1l00346"/>00346 
<anchor xml:id="_visualizer_8cpp_source_1l00347"/>00347 }
<anchor xml:id="_visualizer_8cpp_source_1l00348"/>00348 
<anchor xml:id="_visualizer_8cpp_source_1l00349"/>00349 <emphasis role="keywordtype">void</emphasis>&#32;Visualizer::_setToCamera(<emphasis role="keywordtype">float</emphasis>&#32;remaining_percentage){
<anchor xml:id="_visualizer_8cpp_source_1l00350"/>00350 
<anchor xml:id="_visualizer_8cpp_source_1l00351"/>00351 &#32;&#32;&#32;&#32;_show_timer(remaining_percentage);
<anchor xml:id="_visualizer_8cpp_source_1l00352"/>00352 
<anchor xml:id="_visualizer_8cpp_source_1l00353"/>00353 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cameraW=cameraFrame.cols;
<anchor xml:id="_visualizer_8cpp_source_1l00354"/>00354 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cameraH=cameraFrame.rows;
<anchor xml:id="_visualizer_8cpp_source_1l00355"/>00355 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;top&#32;left&#32;of&#32;the&#32;visualFrame&#32;is&#32;...</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00356"/>00356 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;L&#32;=&#32;(visualFrame.cols&#32;-&#32;cameraW)/2;
<anchor xml:id="_visualizer_8cpp_source_1l00357"/>00357 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;T&#32;=&#32;(visualFrame.rows&#32;-&#32;cameraH)/2;
<anchor xml:id="_visualizer_8cpp_source_1l00358"/>00358 
<anchor xml:id="_visualizer_8cpp_source_1l00359"/>00359 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;draw&#32;transparent&#32;pixels&#32;in&#32;a&#32;form&#32;of&#32;enclosed&#32;circle&#32;within&#32;camera&#32;frame</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00360"/>00360 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;vB&#32;=&#32;(double)visualFrame.at&lt;cv::Vec3b&gt;(0,0)[0];
<anchor xml:id="_visualizer_8cpp_source_1l00361"/>00361 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;vG&#32;=&#32;(double)visualFrame.at&lt;cv::Vec3b&gt;(0,0)[1];
<anchor xml:id="_visualizer_8cpp_source_1l00362"/>00362 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;vR&#32;=&#32;(double)visualFrame.at&lt;cv::Vec3b&gt;(0,0)[2];
<anchor xml:id="_visualizer_8cpp_source_1l00363"/>00363 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i=0;i&lt;cameraW;i++){
<anchor xml:id="_visualizer_8cpp_source_1l00364"/>00364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j=0;j&lt;cameraH;j++){
<anchor xml:id="_visualizer_8cpp_source_1l00365"/>00365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(camBinaryMask.at&lt;<emphasis role="keywordtype">double</emphasis>&gt;(j,i)&gt;0.){
<anchor xml:id="_visualizer_8cpp_source_1l00366"/>00366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;ratio&#32;=&#32;camBinaryMask.at&lt;<emphasis role="keywordtype">double</emphasis>&gt;(j,i);
<anchor xml:id="_visualizer_8cpp_source_1l00367"/>00367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cameraFrame.at&lt;cv::Vec3b&gt;(j,i)[0]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(((ratio*vB)&#32;+&#32;(1.-ratio)*(<emphasis role="keywordtype">double</emphasis>)cameraFrame.at&lt;cv::Vec3b&gt;(j,i)[0])/2.);
<anchor xml:id="_visualizer_8cpp_source_1l00368"/>00368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cameraFrame.at&lt;cv::Vec3b&gt;(j,i)[1]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(((ratio*vG)&#32;+&#32;(1.-ratio)*(<emphasis role="keywordtype">double</emphasis>)cameraFrame.at&lt;cv::Vec3b&gt;(j,i)[1])/2.);
<anchor xml:id="_visualizer_8cpp_source_1l00369"/>00369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cameraFrame.at&lt;cv::Vec3b&gt;(j,i)[2]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(((ratio*vR)&#32;+&#32;(1.-ratio)*(<emphasis role="keywordtype">double</emphasis>)cameraFrame.at&lt;cv::Vec3b&gt;(j,i)[2])/2.);
<anchor xml:id="_visualizer_8cpp_source_1l00370"/>00370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00371"/>00371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00372"/>00372 &#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00373"/>00373 &#32;&#32;&#32;&#32;cameraFrame.copyTo(visualFrame(cv::Rect(L,T,cameraW,cameraH)));
<anchor xml:id="_visualizer_8cpp_source_1l00374"/>00374 }
<anchor xml:id="_visualizer_8cpp_source_1l00375"/>00375 
<anchor xml:id="_visualizer_8cpp_source_1l00376"/>00376 <emphasis role="keywordtype">void</emphasis>&#32;Visualizer::drawSpectrogram(){
<anchor xml:id="_visualizer_8cpp_source_1l00377"/>00377 
<anchor xml:id="_visualizer_8cpp_source_1l00378"/>00378 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;FREQ_MIN&#32;=&#32;(double)cfg.<link linkend="_classConfig_1a91839b9ae92f5503ed43baa71da88fdc">iavconf</link>.<link linkend="_structIAVConfig_1ad171cfdbc06a2403eb3dad6636a59cf0">minFrequency</link>;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00379"/>00379 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">double</emphasis>&#32;FREQ_MAX&#32;=&#32;(<emphasis role="keywordtype">double</emphasis>)cfg.<link linkend="_classConfig_1a91839b9ae92f5503ed43baa71da88fdc">iavconf</link>.<link linkend="_structIAVConfig_1a00eb72c5d6c59eb3d3308bdb1d337a10">maxFrequency</link>;
<anchor xml:id="_visualizer_8cpp_source_1l00380"/>00380 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;SR&#32;=&#32;cfg.<link linkend="_classConfig_1a9f58fb425653b02d94a2961f7bdd9e45">audconf</link>.<link linkend="_structAudioConfig_1aa893cf0e18009ba2aeb67a105d42aa71">sampleRate</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00381"/>00381 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;W&#32;=&#32;cfg.<link linkend="_classConfig_1ab6692268f819ce3f8474d1d791f3aaee">dispconf</link>.<link linkend="_structDisplayConfig_1a633402e1095e221e678ce55fee7f3f9e">dispResW</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00382"/>00382 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;H&#32;=&#32;cfg.<link linkend="_classConfig_1ab6692268f819ce3f8474d1d791f3aaee">dispconf</link>.<link linkend="_structDisplayConfig_1ae781f975c0fac0c92d0f1802468ee578">dispResH</link>.load();
<anchor xml:id="_visualizer_8cpp_source_1l00383"/>00383 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numAudioSamples&#32;=&#32;spectrogram.<link linkend="_classSpectrogram_1a4662b609d61e705f4271526cad43f045">get_numAudioSamples</link>();
<anchor xml:id="_visualizer_8cpp_source_1l00384"/>00384 
<anchor xml:id="_visualizer_8cpp_source_1l00385"/>00385 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;min_magnitude,max_magnitude;
<anchor xml:id="_visualizer_8cpp_source_1l00386"/>00386 &#32;&#32;&#32;&#32;spectrogram.<link linkend="_classSpectrogram_1a16d81b46bf82053953892344d3f24a2c">readBatch</link>(specMagnitude,min_magnitude,max_magnitude);
<anchor xml:id="_visualizer_8cpp_source_1l00387"/>00387 
<anchor xml:id="_visualizer_8cpp_source_1l00388"/>00388 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;specMagnitude.size()&#32;;&#32;++i)&#32;{
<anchor xml:id="_visualizer_8cpp_source_1l00389"/>00389 
<anchor xml:id="_visualizer_8cpp_source_1l00390"/>00390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;magnitude&#32;=&#32;specMagnitude[i];
<anchor xml:id="_visualizer_8cpp_source_1l00391"/>00391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00392"/>00392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Minmax&#32;magnitude&apos;s&#32;normalization&#32;&#32;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00393"/>00393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;normalized_magnitude&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00394"/>00394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::min(&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00395"/>00395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<emphasis role="keywordtype">float</emphasis>)((magnitude&#32;-&#32;min_magnitude)&#32;/&#32;(max_magnitude&#32;-&#32;min_magnitude)&#32;*&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(H)&#32;*&#32;0.5),
<anchor xml:id="_visualizer_8cpp_source_1l00396"/>00396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(H)/2.f
<anchor xml:id="_visualizer_8cpp_source_1l00397"/>00397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;)
<anchor xml:id="_visualizer_8cpp_source_1l00398"/>00398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
<anchor xml:id="_visualizer_8cpp_source_1l00399"/>00399 
<anchor xml:id="_visualizer_8cpp_source_1l00400"/>00400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;the&#32;frequency&#32;interval&#32;for&#32;each&#32;bin</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00401"/>00401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;freq_bin&#32;=&#32;(SR&#32;/&#32;2.0)&#32;*&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(i)&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(numAudioSamples&#32;/&#32;2.0));&#32;<emphasis role="comment">//&#32;Frequency&#32;of&#32;the&#32;current&#32;bin</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00402"/>00402 
<anchor xml:id="_visualizer_8cpp_source_1l00403"/>00403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;filtering&#32;the&#32;frequencies&#32;outside&#32;the&#32;scope&#32;of&#32;the&#32;iav&#32;application</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00404"/>00404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(freq_bin&#32;&gt;=&#32;FREQ_MIN&#32;&amp;&amp;&#32;freq_bin&#32;&lt;=&#32;FREQ_MAX)&#32;{
<anchor xml:id="_visualizer_8cpp_source_1l00405"/>00405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00406"/>00406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>((freq_bin&#32;-&#32;FREQ_MIN)&#32;/&#32;(FREQ_MAX&#32;-&#32;FREQ_MIN)&#32;*&#32;W);
<anchor xml:id="_visualizer_8cpp_source_1l00407"/>00407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00408"/>00408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;a&#32;the&#32;drawing&#32;line</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00409"/>00409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;line_length&#32;=&#32;normalized_magnitude;
<anchor xml:id="_visualizer_8cpp_source_1l00410"/>00410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;top&#32;=&#32;H&#32;/&#32;2&#32;-&#32;line_length;
<anchor xml:id="_visualizer_8cpp_source_1l00411"/>00411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;bottom&#32;=&#32;H&#32;/&#32;2&#32;+&#32;line_length;
<anchor xml:id="_visualizer_8cpp_source_1l00412"/>00412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00413"/>00413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;y&#32;=&#32;top;&#32;y&#32;&lt;=&#32;bottom;&#32;++y)&#32;{
<anchor xml:id="_visualizer_8cpp_source_1l00414"/>00414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ensure&#32;not&#32;out-of-bounds&#32;</emphasis>
<anchor xml:id="_visualizer_8cpp_source_1l00415"/>00415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(y&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;y&#32;&lt;&#32;H&#32;&amp;&amp;&#32;x&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;x&#32;&lt;&#32;W)&#32;{
<anchor xml:id="_visualizer_8cpp_source_1l00416"/>00416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;visualFrame.at&lt;cv::Vec3b&gt;(y,x)[0]&#32;=&#32;255&#32;-&#32;B;
<anchor xml:id="_visualizer_8cpp_source_1l00417"/>00417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;visualFrame.at&lt;cv::Vec3b&gt;(y,x)[1]&#32;=&#32;255&#32;-&#32;G;
<anchor xml:id="_visualizer_8cpp_source_1l00418"/>00418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;visualFrame.at&lt;cv::Vec3b&gt;(y,x)[2]&#32;=&#32;255&#32;-&#32;R;
<anchor xml:id="_visualizer_8cpp_source_1l00419"/>00419 
<anchor xml:id="_visualizer_8cpp_source_1l00420"/>00420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00421"/>00421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00422"/>00422 
<anchor xml:id="_visualizer_8cpp_source_1l00423"/>00423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00424"/>00424 &#32;&#32;&#32;&#32;}
<anchor xml:id="_visualizer_8cpp_source_1l00425"/>00425 &#32;&#32;&#32;&#32;
<anchor xml:id="_visualizer_8cpp_source_1l00426"/>00426 }
<anchor xml:id="_visualizer_8cpp_source_1l00427"/>00427 
</programlisting></section>
