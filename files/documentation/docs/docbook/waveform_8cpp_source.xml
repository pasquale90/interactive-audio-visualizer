<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_waveform_8cpp_source" xml:lang="en-US">
<title>waveform.cpp</title>
<indexterm><primary>src/waveform.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_waveform_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;climits&gt;</emphasis>
<anchor xml:id="_waveform_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
<anchor xml:id="_waveform_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_waveform_8h">waveform.h</link>&quot;</emphasis>
<anchor xml:id="_waveform_8cpp_source_1l00004"/>00004 
<anchor xml:id="_waveform_8cpp_source_1l00005"/><link linkend="_classWaveform_1a4a10db706dde8126a190a650f0b639fb">00005</link> <link linkend="_classWaveform_1a4a10db706dde8126a190a650f0b639fb">Waveform::Waveform</link>():&#32;readpos(0),&#32;writepos(0){
<anchor xml:id="_waveform_8cpp_source_1l00006"/>00006 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;calculate&#32;num&#32;of&#32;buffers&#32;per&#32;display&#32;frame;</emphasis>
<anchor xml:id="_waveform_8cpp_source_1l00007"/>00007 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;audioSamplesPerFrame&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(cfg.<link linkend="_classConfig_1a9f58fb425653b02d94a2961f7bdd9e45">audconf</link>.<link linkend="_structAudioConfig_1aa893cf0e18009ba2aeb67a105d42aa71">sampleRate</link>.load()&#32;/&#32;cfg.<link linkend="_classConfig_1ab6692268f819ce3f8474d1d791f3aaee">dispconf</link>.<link linkend="_structDisplayConfig_1aefdc15d97fa0d2e067d5efcfda0f4947">fps</link>.load());
<anchor xml:id="_waveform_8cpp_source_1l00008"/>00008 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;buffersPerFrame&#32;=&#32;std::ceil(&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(audioSamplesPerFrame)&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(cfg.<link linkend="_classConfig_1a9f58fb425653b02d94a2961f7bdd9e45">audconf</link>.<link linkend="_structAudioConfig_1ae81381142d99bc1845cb33bd048643df">bufferSize</link>.load()));
<anchor xml:id="_waveform_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;audioSamplesPerFrame&#32;=&#32;(buffersPerFrame+1)&#32;*&#32;cfg.<link linkend="_classConfig_1a9f58fb425653b02d94a2961f7bdd9e45">audconf</link>.<link linkend="_structAudioConfig_1ae81381142d99bc1845cb33bd048643df">bufferSize</link>.load();&#32;<emphasis role="comment">//&#32;add&#32;1&#32;and&#32;make&#32;it&#32;divisible&#32;by&#32;bufferSize.</emphasis>
<anchor xml:id="_waveform_8cpp_source_1l00010"/>00010 
<anchor xml:id="_waveform_8cpp_source_1l00011"/>00011 &#32;&#32;&#32;&#32;waveTable.reserve(audioSamplesPerFrame);
<anchor xml:id="_waveform_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;waveTable.resize(audioSamplesPerFrame);
<anchor xml:id="_waveform_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;
<anchor xml:id="_waveform_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;capacity&#32;=&#32;(size_t)audioSamplesPerFrame;
<anchor xml:id="_waveform_8cpp_source_1l00015"/>00015 &#32;&#32;&#32;&#32;min&#32;=&#32;INT_MAX,&#32;max&#32;=&#32;0.;
<anchor xml:id="_waveform_8cpp_source_1l00016"/>00016 }
<anchor xml:id="_waveform_8cpp_source_1l00017"/>00017 
<anchor xml:id="_waveform_8cpp_source_1l00018"/><link linkend="_classWaveform_1a6b4f4455a6a8ae2222f967e88b80460b">00018</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classWaveform_1a6b4f4455a6a8ae2222f967e88b80460b">Waveform::write</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&amp;&#32;arg){&#32;<emphasis role="comment">//&#32;T&amp;&amp;&#32;arg&#32;--&gt;&#32;rvalue&#32;reference</emphasis>
<anchor xml:id="_waveform_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;writePos&#32;=&#32;writepos.load();&#32;<emphasis role="comment">//??</emphasis>
<anchor xml:id="_waveform_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;nextWritePos&#32;=&#32;(writePos&#32;+&#32;1)&#32;%&#32;waveTable.size();
<anchor xml:id="_waveform_8cpp_source_1l00021"/>00021 
<anchor xml:id="_waveform_8cpp_source_1l00022"/>00022 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;the&#32;buffer&#32;is&#32;full,&#32;overwrite&#32;the&#32;oldest&#32;data</emphasis>
<anchor xml:id="_waveform_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nextWritePos&#32;==&#32;readpos.load())&#32;{
<anchor xml:id="_waveform_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;readPos&#32;=&#32;(readpos.load()&#32;+&#32;1)&#32;%&#32;waveTable.size();
<anchor xml:id="_waveform_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;readpos.store(readPos,&#32;std::memory_order_release);
<anchor xml:id="_waveform_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;}
<anchor xml:id="_waveform_8cpp_source_1l00027"/>00027 
<anchor xml:id="_waveform_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;min&#32;=&#32;std::min(min,arg);
<anchor xml:id="_waveform_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;max&#32;=&#32;std::max(max,arg);
<anchor xml:id="_waveform_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;
<anchor xml:id="_waveform_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;write&#32;data&#32;to&#32;the&#32;buffer</emphasis>
<anchor xml:id="_waveform_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;waveTable[writePos]&#32;=&#32;arg;
<anchor xml:id="_waveform_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;writepos.store(nextWritePos);
<anchor xml:id="_waveform_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_waveform_8cpp_source_1l00035"/>00035 
<anchor xml:id="_waveform_8cpp_source_1l00036"/>00036 }
<anchor xml:id="_waveform_8cpp_source_1l00037"/>00037 
<anchor xml:id="_waveform_8cpp_source_1l00038"/><link linkend="_classWaveform_1ad4309d03c34e0b7ebe173ee8bd536116">00038</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classWaveform_1ad4309d03c34e0b7ebe173ee8bd536116">Waveform::read</link>(<emphasis role="keywordtype">float</emphasis>&amp;&#32;result){
<anchor xml:id="_waveform_8cpp_source_1l00039"/>00039 
<anchor xml:id="_waveform_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;readPos&#32;=&#32;readpos.load();
<anchor xml:id="_waveform_8cpp_source_1l00041"/>00041 
<anchor xml:id="_waveform_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;buffer&#32;is&#32;empty&#32;return&#32;false&#32;&#32;</emphasis>
<anchor xml:id="_waveform_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(readPos&#32;==&#32;writepos.load()){
<anchor xml:id="_waveform_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_waveform_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;}
<anchor xml:id="_waveform_8cpp_source_1l00046"/>00046 
<anchor xml:id="_waveform_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;move&#32;data&#32;out&#32;of&#32;the&#32;buffer;</emphasis>
<anchor xml:id="_waveform_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;result&#32;=&#32;waveTable[readPos];
<anchor xml:id="_waveform_8cpp_source_1l00049"/>00049 
<anchor xml:id="_waveform_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;advance&#32;the&#32;read&#32;pointer</emphasis>
<anchor xml:id="_waveform_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;<emphasis role="keyword">auto</emphasis>&#32;nextReadPos&#32;=&#32;(readPos&#32;+&#32;1)&#32;%&#32;waveTable.size();
<anchor xml:id="_waveform_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;readpos.store(nextReadPos);
<anchor xml:id="_waveform_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_waveform_8cpp_source_1l00054"/>00054 }
<anchor xml:id="_waveform_8cpp_source_1l00055"/>00055 
<anchor xml:id="_waveform_8cpp_source_1l00056"/><link linkend="_classWaveform_1ab6511211e5b81756a2a6a502ba1f0d4b">00056</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classWaveform_1ab6511211e5b81756a2a6a502ba1f0d4b">Waveform::isEmpty</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_waveform_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;readpos.load()&#32;==&#32;writepos.load();
<anchor xml:id="_waveform_8cpp_source_1l00058"/>00058 }
<anchor xml:id="_waveform_8cpp_source_1l00059"/>00059 
<anchor xml:id="_waveform_8cpp_source_1l00060"/><link linkend="_classWaveform_1ac92843770623eb8e7d4d3b34bb5eef7a">00060</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classWaveform_1ac92843770623eb8e7d4d3b34bb5eef7a">Waveform::isFull</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_waveform_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;((&#32;writepos.load()&#32;+&#32;1&#32;)&#32;%&#32;waveTable.size())&#32;==&#32;readpos.load();
<anchor xml:id="_waveform_8cpp_source_1l00062"/>00062 }
<anchor xml:id="_waveform_8cpp_source_1l00063"/>00063 
<anchor xml:id="_waveform_8cpp_source_1l00064"/><link linkend="_classWaveform_1a55aadc54c0329bb9e25fecbf895b71f2">00064</link> <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classWaveform_1a55aadc54c0329bb9e25fecbf895b71f2">Waveform::size</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;
<anchor xml:id="_waveform_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;capacity;
<anchor xml:id="_waveform_8cpp_source_1l00066"/>00066 }
<anchor xml:id="_waveform_8cpp_source_1l00067"/>00067 
<anchor xml:id="_waveform_8cpp_source_1l00068"/><link linkend="_classWaveform_1affe280dcbbde4ed935db6ad3f5d6cc80">00068</link> <emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classWaveform_1affe280dcbbde4ed935db6ad3f5d6cc80">Waveform::availableForReading</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
<anchor xml:id="_waveform_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;writePos&#32;=&#32;writepos.load();
<anchor xml:id="_waveform_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;readPos&#32;=&#32;readpos.load();
<anchor xml:id="_waveform_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(writePos&#32;&gt;=&#32;readPos)&#32;{
<anchor xml:id="_waveform_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;writePos&#32;-&#32;readPos;&#32;&#32;<emphasis role="comment">//&#32;Normal&#32;case,&#32;no&#32;wraparound</emphasis>
<anchor xml:id="_waveform_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_waveform_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;waveTable.size()&#32;-&#32;(readPos&#32;-&#32;writePos);&#32;&#32;<emphasis role="comment">//&#32;Wraparound&#32;case</emphasis>
<anchor xml:id="_waveform_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;}
<anchor xml:id="_waveform_8cpp_source_1l00076"/>00076 }
<anchor xml:id="_waveform_8cpp_source_1l00077"/>00077 
<anchor xml:id="_waveform_8cpp_source_1l00083"/><link linkend="_classWaveform_1a57d9f5fae074ff6e3d7d1f687442e427">00083</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classWaveform_1a57d9f5fae074ff6e3d7d1f687442e427">Waveform::getMinMax</link>(<emphasis role="keywordtype">float</emphasis>&#32;minMax[2]){
<anchor xml:id="_waveform_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;minMax[0]&#32;=&#32;this-&gt;min;
<anchor xml:id="_waveform_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;minMax[1]&#32;=&#32;this-&gt;max;
<anchor xml:id="_waveform_8cpp_source_1l00086"/>00086 }
</programlisting></section>
