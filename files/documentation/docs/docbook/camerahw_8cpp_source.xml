<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_camerahw_8cpp_source" xml:lang="en-US">
<title>camerahw.cpp</title>
<indexterm><primary>src/gui/camerahw.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_camerahw_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&lt;algorithm&gt;</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;unordered_set&gt;</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&lt;linux/videodev2.h&gt;</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&lt;sys/ioctl.h&gt;</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00006"/>00006 <emphasis role="preprocessor">#include&#32;&lt;fcntl.h&gt;</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00007"/>00007 <emphasis role="preprocessor">#include&#32;&lt;unistd.h&gt;</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00008"/>00008 <emphasis role="comment">//&#32;#include&#32;&lt;errno.h&gt;</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00009"/>00009 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_camerahw_8h">gui/camerahw.h</link>&quot;</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00010"/>00010 
<anchor xml:id="_camerahw_8cpp_source_1l00011"/>00011 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;compareResolutions(std::pair&lt;int,&#32;int&gt;&#32;r1,std::pair&lt;int,&#32;int&gt;&#32;r2){
<anchor xml:id="_camerahw_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(r1.first&#32;&gt;&#32;r2.first)&#32;?&#32;true&#32;:&#32;(r1.second&#32;&gt;&#32;r2.second);
<anchor xml:id="_camerahw_8cpp_source_1l00013"/>00013 }
<anchor xml:id="_camerahw_8cpp_source_1l00014"/>00014 
<anchor xml:id="_camerahw_8cpp_source_1l00015"/><link linkend="_camerahw_8cpp_1a3d0a95992cb94b91094a9251b01b821c">00015</link> std::vector&lt;CameraInfo&gt;&#32;<link linkend="_camerahw_8cpp_1a3d0a95992cb94b91094a9251b01b821c">getAvailableCameras</link>()&#32;{
<anchor xml:id="_camerahw_8cpp_source_1l00016"/>00016 &#32;&#32;&#32;&#32;std::vector&lt;CameraInfo&gt;&#32;cameras;
<anchor xml:id="_camerahw_8cpp_source_1l00017"/>00017 &#32;&#32;&#32;&#32;std::unordered_set&lt;std::string&gt;&#32;uniquesResolutionValues;
<anchor xml:id="_camerahw_8cpp_source_1l00018"/>00018 
<anchor xml:id="_camerahw_8cpp_source_1l00019"/>00019 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;16;&#32;++i)&#32;{&#32;<emphasis role="comment">//&#32;Check&#32;up&#32;to&#32;16&#32;potential&#32;camera&#32;devices</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;devicePath&#32;=&#32;<emphasis role="stringliteral">&quot;/dev/video&quot;</emphasis>&#32;+&#32;std::to_string(i);
<anchor xml:id="_camerahw_8cpp_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;fd&#32;=&#32;open(devicePath.c_str(),&#32;O_RDWR&#32;|&#32;O_NONBLOCK,&#32;0);
<anchor xml:id="_camerahw_8cpp_source_1l00022"/>00022 
<anchor xml:id="_camerahw_8cpp_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(fd&#32;==&#32;-1)&#32;{
<anchor xml:id="_camerahw_8cpp_source_1l00024"/>00024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(errno&#32;==&#32;ENOENT&#32;||&#32;errno&#32;==&#32;EACCES)&#32;{
<anchor xml:id="_camerahw_8cpp_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;<emphasis role="comment">//&#32;Device&#32;doesn&apos;t&#32;exist&#32;or&#32;no&#32;permission,&#32;try&#32;next</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="_camerahw_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;perror(<emphasis role="stringliteral">&quot;open&quot;</emphasis>);
<anchor xml:id="_camerahw_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;&#32;<emphasis role="comment">//&#32;Some&#32;other&#32;error,&#32;try&#32;next</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_camerahw_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_camerahw_8cpp_source_1l00031"/>00031 
<anchor xml:id="_camerahw_8cpp_source_1l00032"/>00032 
<anchor xml:id="_camerahw_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>v4l2_capability&#32;cap;
<anchor xml:id="_camerahw_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ioctl(fd,&#32;VIDIOC_QUERYCAP,&#32;&amp;cap)&#32;==&#32;-1)&#32;{
<anchor xml:id="_camerahw_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;perror(<emphasis role="stringliteral">&quot;VIDIOC_QUERYCAP&quot;</emphasis>);
<anchor xml:id="_camerahw_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;close(fd);
<anchor xml:id="_camerahw_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_camerahw_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_camerahw_8cpp_source_1l00039"/>00039 
<anchor xml:id="_camerahw_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(cap.capabilities&#32;&amp;&#32;V4L2_CAP_VIDEO_CAPTURE))&#32;{
<anchor xml:id="_camerahw_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//Not&#32;a&#32;video&#32;capture&#32;device</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;close(fd);
<anchor xml:id="_camerahw_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
<anchor xml:id="_camerahw_8cpp_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_camerahw_8cpp_source_1l00045"/>00045 
<anchor xml:id="_camerahw_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structCameraInfo">CameraInfo</link>&#32;camera;
<anchor xml:id="_camerahw_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;camera.<link linkend="_structCameraInfo_1aae33d6b66dff390f7de58e343745cf22">devicePath</link>&#32;=&#32;devicePath;
<anchor xml:id="_camerahw_8cpp_source_1l00048"/>00048 
<anchor xml:id="_camerahw_8cpp_source_1l00049"/>00049 
<anchor xml:id="_camerahw_8cpp_source_1l00050"/>00050 
<anchor xml:id="_camerahw_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>v4l2_fmtdesc&#32;fmtdesc;
<anchor xml:id="_camerahw_8cpp_source_1l00052"/>00052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(&amp;fmtdesc,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(fmtdesc));
<anchor xml:id="_camerahw_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fmtdesc.index&#32;=&#32;0;
<anchor xml:id="_camerahw_8cpp_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fmtdesc.type&#32;=&#32;V4L2_BUF_TYPE_VIDEO_CAPTURE;
<anchor xml:id="_camerahw_8cpp_source_1l00055"/>00055 
<anchor xml:id="_camerahw_8cpp_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(ioctl(fd,&#32;VIDIOC_ENUM_FMT,&#32;&amp;fmtdesc)&#32;==&#32;0)&#32;{
<anchor xml:id="_camerahw_8cpp_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>v4l2_frmsizeenum&#32;frmsizeenum;
<anchor xml:id="_camerahw_8cpp_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(&amp;frmsizeenum,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(frmsizeenum));
<anchor xml:id="_camerahw_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frmsizeenum.index&#32;=&#32;0;
<anchor xml:id="_camerahw_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frmsizeenum.pixel_format&#32;=&#32;fmtdesc.pixelformat;
<anchor xml:id="_camerahw_8cpp_source_1l00061"/>00061 
<anchor xml:id="_camerahw_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(ioctl(fd,&#32;VIDIOC_ENUM_FRAMESIZES,&#32;&amp;frmsizeenum)&#32;==&#32;0)&#32;{
<anchor xml:id="_camerahw_8cpp_source_1l00063"/>00063 
<anchor xml:id="_camerahw_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frmsizeenum.type&#32;==&#32;V4L2_FRMSIZE_TYPE_DISCRETE)&#32;{
<anchor xml:id="_camerahw_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;resVal&#32;=&#32;std::to_string(frmsizeenum.discrete.width)&#32;+<emphasis role="stringliteral">&quot;x&quot;</emphasis>+&#32;std::to_string(frmsizeenum.discrete.height);
<anchor xml:id="_camerahw_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(uniquesResolutionValues.find(resVal)==&#32;uniquesResolutionValues.end()){
<anchor xml:id="_camerahw_8cpp_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;camera.<link linkend="_structCameraInfo_1a3d087eed7588f561a3fc89d4420aba53">resolutions</link>.push_back({frmsizeenum.discrete.width,&#32;frmsizeenum.discrete.height});
<anchor xml:id="_camerahw_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uniquesResolutionValues.insert(resVal);
<anchor xml:id="_camerahw_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_camerahw_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frmsizeenum.type&#32;==&#32;V4L2_FRMSIZE_TYPE_STEPWISE)&#32;{
<anchor xml:id="_camerahw_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;w&#32;=&#32;frmsizeenum.stepwise.min_width;&#32;w&#32;&lt;=&#32;frmsizeenum.stepwise.max_width;&#32;w&#32;+=&#32;frmsizeenum.stepwise.step_width)&#32;{
<anchor xml:id="_camerahw_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;h&#32;=&#32;frmsizeenum.stepwise.min_height;&#32;h&#32;&lt;=&#32;frmsizeenum.stepwise.max_height;&#32;h&#32;+=&#32;frmsizeenum.stepwise.step_height)&#32;{
<anchor xml:id="_camerahw_8cpp_source_1l00073"/>00073 
<anchor xml:id="_camerahw_8cpp_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::string&#32;resVal&#32;=&#32;std::to_string(w)&#32;+<emphasis role="stringliteral">&quot;x&quot;</emphasis>+&#32;std::to_string(h);
<anchor xml:id="_camerahw_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>(uniquesResolutionValues.find(resVal)==&#32;uniquesResolutionValues.end()){
<anchor xml:id="_camerahw_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;camera.<link linkend="_structCameraInfo_1a3d087eed7588f561a3fc89d4420aba53">resolutions</link>.push_back({w,h});
<anchor xml:id="_camerahw_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uniquesResolutionValues.insert(resVal);
<anchor xml:id="_camerahw_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_camerahw_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_camerahw_8cpp_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_camerahw_8cpp_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_camerahw_8cpp_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_camerahw_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frmsizeenum.index++;
<anchor xml:id="_camerahw_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_camerahw_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;fmtdesc.index++;
<anchor xml:id="_camerahw_8cpp_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_camerahw_8cpp_source_1l00087"/>00087 
<anchor xml:id="_camerahw_8cpp_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::sort(camera.<link linkend="_structCameraInfo_1a3d087eed7588f561a3fc89d4420aba53">resolutions</link>.begin(),camera.<link linkend="_structCameraInfo_1a3d087eed7588f561a3fc89d4420aba53">resolutions</link>.end(),compareResolutions);
<anchor xml:id="_camerahw_8cpp_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cameras.push_back(camera);
<anchor xml:id="_camerahw_8cpp_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;close(fd);
<anchor xml:id="_camerahw_8cpp_source_1l00091"/>00091 &#32;&#32;&#32;&#32;}
<anchor xml:id="_camerahw_8cpp_source_1l00092"/>00092 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cameras;
<anchor xml:id="_camerahw_8cpp_source_1l00093"/>00093 }
<anchor xml:id="_camerahw_8cpp_source_1l00094"/>00094 
<anchor xml:id="_camerahw_8cpp_source_1l00095"/>00095 
<anchor xml:id="_camerahw_8cpp_source_1l00096"/>00096 
<anchor xml:id="_camerahw_8cpp_source_1l00097"/>00097 
<anchor xml:id="_camerahw_8cpp_source_1l00098"/>00098 
<anchor xml:id="_camerahw_8cpp_source_1l00099"/>00099 <emphasis role="comment">//&#32;int&#32;main()&#32;{</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00100"/>00100 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;auto&#32;cameras&#32;=&#32;getAvailableCameras();</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00101"/>00101 
<anchor xml:id="_camerahw_8cpp_source_1l00102"/>00102 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;for&#32;(const&#32;auto&amp;&#32;camera&#32;:&#32;cameras)&#32;{</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00103"/>00103 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Camera:&#32;&quot;&#32;&lt;&lt;&#32;camera.devicePath&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00104"/>00104 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;Available&#32;resolutions:&quot;&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00105"/>00105 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(const&#32;auto&amp;&#32;res&#32;:&#32;camera.resolutions)&#32;{</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00106"/>00106 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;&quot;\t&quot;&#32;&lt;&lt;&#32;res.first&#32;&lt;&lt;&#32;&quot;x&quot;&#32;&lt;&lt;&#32;res.second&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00107"/>00107 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00108"/>00108 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;std::endl;</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00109"/>00109 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;}</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00110"/>00110 
<anchor xml:id="_camerahw_8cpp_source_1l00111"/>00111 
<anchor xml:id="_camerahw_8cpp_source_1l00112"/>00112 <emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;return&#32;0;</emphasis>
<anchor xml:id="_camerahw_8cpp_source_1l00113"/>00113 <emphasis role="comment">//&#32;}</emphasis>
</programlisting></section>
