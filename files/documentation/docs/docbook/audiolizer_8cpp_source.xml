<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_audiolizer_8cpp_source" xml:lang="en-US">
<title>audiolizer.cpp</title>
<indexterm><primary>src/audiolizer.cpp</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered"><anchor xml:id="_audiolizer_8cpp_source_1l00001"/>00001 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_audiolizer_8h">audiolizer.h</link>&quot;</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00002"/>00002 <emphasis role="preprocessor">#include&#32;&lt;math.h&gt;</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00003"/>00003 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_config_8h">config.h</link>&quot;</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00004"/>00004 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_roi_8h">roi.h</link>&quot;</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00005"/>00005 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_tone_8h">tone.h</link>&quot;</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00006"/>00006 
<anchor xml:id="_audiolizer_8cpp_source_1l00007"/><link linkend="_classAudiolizer_1a416bdbc7e4c303d921cf8a1995a08c9a">00007</link> <link linkend="_classAudiolizer_1a416bdbc7e4c303d921cf8a1995a08c9a">Audiolizer::Audiolizer</link>():cameracfg(<link linkend="_classConfig">Config</link>::getInstance().camconf),iavcfg(<link linkend="_classConfig">Config</link>::getInstance().iavconf){
<anchor xml:id="_audiolizer_8cpp_source_1l00008"/>00008 
<anchor xml:id="_audiolizer_8cpp_source_1l00009"/>00009 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;@TEMPORARY&#32;DISABLED</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00010"/>00010 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;init_log_freq_scale();&#32;//&#32;currently&#32;not&#32;used.&#32;Use&#32;_int2log_freq&#32;(currently&#32;not&#32;used&#32;either)&#32;is&#32;affected&#32;by&#32;this&#32;method..</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00011"/>00011 
<anchor xml:id="_audiolizer_8cpp_source_1l00012"/>00012 &#32;&#32;&#32;&#32;frequencyRange&#32;=&#32;iavcfg.<link linkend="_structIAVConfig_1a00eb72c5d6c59eb3d3308bdb1d337a10">maxFrequency</link>&#32;-&#32;iavcfg.<link linkend="_structIAVConfig_1ad171cfdbc06a2403eb3dad6636a59cf0">minFrequency</link>;
<anchor xml:id="_audiolizer_8cpp_source_1l00013"/>00013 &#32;&#32;&#32;&#32;prev_freq=0;
<anchor xml:id="_audiolizer_8cpp_source_1l00014"/>00014 &#32;&#32;&#32;&#32;volume&#32;=&#32;0.f;
<anchor xml:id="_audiolizer_8cpp_source_1l00015"/>00015 }
<anchor xml:id="_audiolizer_8cpp_source_1l00016"/>00016 
<anchor xml:id="_audiolizer_8cpp_source_1l00017"/><link linkend="_classAudiolizer_1a615968fb43d145079d06521ad7634946">00017</link> <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classAudiolizer_1a615968fb43d145079d06521ad7634946">Audiolizer::setAudioUpdater</link>(std::function&lt;<emphasis role="keywordtype">void</emphasis>(<emphasis role="keywordtype">int</emphasis>,&#32;<emphasis role="keywordtype">float</emphasis>)&gt;&#32;func){
<anchor xml:id="_audiolizer_8cpp_source_1l00018"/>00018 &#32;&#32;&#32;&#32;updateAudio&#32;=&#32;std::move(func);
<anchor xml:id="_audiolizer_8cpp_source_1l00019"/>00019 }
<anchor xml:id="_audiolizer_8cpp_source_1l00020"/>00020 
<anchor xml:id="_audiolizer_8cpp_source_1l00021"/><link linkend="_classAudiolizer_1a2b9a26bd1486ebf2bdae14d7edd370c0">00021</link> <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classAudiolizer_1a2b9a26bd1486ebf2bdae14d7edd370c0">Audiolizer::turn_Image_into_Sound</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;tracking_updated,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;pattern_locked&#32;,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structRegionOfInterest">RegionOfInterest</link>&#32;&amp;roi,&#32;<link linkend="_structTone">Tone</link>&#32;&amp;tone){
<anchor xml:id="_audiolizer_8cpp_source_1l00022"/>00022 
<anchor xml:id="_audiolizer_8cpp_source_1l00023"/>00023 <emphasis role="comment">&#32;&#32;&#32;/***</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00024"/>00024 <emphasis role="comment">&#32;&#32;&#32;&#32;*&#32;returns&#32;by&#32;reference&#32;the&#32;frequency&#32;that&#32;will&#32;be&#32;streamed&#32;on&#32;the&#32;next&#32;audio&#32;buffer</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00025"/>00025 <emphasis role="comment">&#32;&#32;&#32;*/</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00026"/>00026 &#32;&#32;&#32;&#32;
<anchor xml:id="_audiolizer_8cpp_source_1l00027"/>00027 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;frequency&#32;=&#32;tone.<link linkend="_structTone_1a8c28a65c858594e410d94921d7abc1fa">frequency</link>.load();
<anchor xml:id="_audiolizer_8cpp_source_1l00028"/>00028 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;prevFreq&#32;=&#32;prev_freq;
<anchor xml:id="_audiolizer_8cpp_source_1l00029"/>00029 
<anchor xml:id="_audiolizer_8cpp_source_1l00030"/>00030 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pattern_locked){
<anchor xml:id="_audiolizer_8cpp_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(tracking_updated)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;if&#32;tracking&#32;updated&#32;--&gt;&#32;new&#32;x,y&#32;--&gt;&#32;new&#32;freq</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;translate(roi,&#32;frequency);&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="_audiolizer_8cpp_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;else&#32;--&gt;&#32;previous&#32;frequency</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frequency=prev_freq;
<anchor xml:id="_audiolizer_8cpp_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;
<anchor xml:id="_audiolizer_8cpp_source_1l00036"/>00036 &#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>{&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;gradualy&#32;fade&#32;frequency&#32;to&#32;zero&#32;--&gt;&#32;if&#32;frequency&#32;&gt;&#32;0&#32;,&#32;slowly&#32;decline</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frequency&gt;1){&#32;
<anchor xml:id="_audiolizer_8cpp_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;gradualy_fade(frequency);&#32;<emphasis role="comment">//&#32;gradualy&#32;fade&#32;frequency&#32;to&#32;zero&#32;--&gt;&#32;if&#32;frequency&#32;&gt;&#32;0&#32;,&#32;slowly&#32;decline</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>{
<anchor xml:id="_audiolizer_8cpp_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frequency=0;
<anchor xml:id="_audiolizer_8cpp_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;volume&#32;=&#32;0.f;
<anchor xml:id="_audiolizer_8cpp_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="_audiolizer_8cpp_source_1l00043"/>00043 &#32;&#32;&#32;&#32;}
<anchor xml:id="_audiolizer_8cpp_source_1l00044"/>00044 
<anchor xml:id="_audiolizer_8cpp_source_1l00045"/>00045 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;update&#32;audioStream&#32;with&#32;the&#32;newFrequency</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00046"/>00046 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;frequencyChanged&#32;=&#32;frequency&#32;!=&#32;prevFreq;
<anchor xml:id="_audiolizer_8cpp_source_1l00047"/>00047 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(frequencyChanged){
<anchor xml:id="_audiolizer_8cpp_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;updateAudio(frequency&#32;,&#32;volume);
<anchor xml:id="_audiolizer_8cpp_source_1l00049"/>00049 &#32;&#32;&#32;&#32;}
<anchor xml:id="_audiolizer_8cpp_source_1l00050"/>00050 &#32;&#32;&#32;&#32;tone.<link linkend="_structTone_1a8c28a65c858594e410d94921d7abc1fa">frequency</link>.store(frequency);
<anchor xml:id="_audiolizer_8cpp_source_1l00051"/>00051 &#32;&#32;&#32;&#32;tone.<link linkend="_structTone_1ad643b37d799caa83f6a80dc2f001aa4a">volume</link>.store(volume);
<anchor xml:id="_audiolizer_8cpp_source_1l00052"/>00052 
<anchor xml:id="_audiolizer_8cpp_source_1l00053"/>00053 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;frequencyChanged;
<anchor xml:id="_audiolizer_8cpp_source_1l00054"/>00054 
<anchor xml:id="_audiolizer_8cpp_source_1l00055"/>00055 }
<anchor xml:id="_audiolizer_8cpp_source_1l00056"/>00056 
<anchor xml:id="_audiolizer_8cpp_source_1l00057"/>00057 <emphasis role="keywordtype">bool</emphasis>&#32;Audiolizer::translate(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structRegionOfInterest">RegionOfInterest</link>&#32;&amp;roi,&#32;<emphasis role="keywordtype">int</emphasis>&amp;&#32;freq){
<anchor xml:id="_audiolizer_8cpp_source_1l00058"/>00058 
<anchor xml:id="_audiolizer_8cpp_source_1l00059"/>00059 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;translate&#32;the&#32;x&#32;coordinate.</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00060"/>00060 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;roiCenterX&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(roi.<link linkend="_structRegionOfInterest_1a7c05ee763a1dbcea5d7722c8611e6bc7">centerX</link>.load());
<anchor xml:id="_audiolizer_8cpp_source_1l00061"/>00061 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;normalize&#32;x,&#32;y&#32;position&#32;</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00062"/>00062 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;spatial_percent&#32;=&#32;roiCenterX&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(cameracfg.<link linkend="_structCameraConfig_1a53d5be43d6362ca145c56a64fe475bb9">camResW</link>.load());
<anchor xml:id="_audiolizer_8cpp_source_1l00063"/>00063 &#32;&#32;&#32;&#32;<emphasis role="comment">//apply&#32;translation&#32;from&#32;x,y&#32;to&#32;Hz</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00064"/>00064 &#32;&#32;&#32;&#32;freq&#32;=&#32;iavcfg.<link linkend="_structIAVConfig_1ad171cfdbc06a2403eb3dad6636a59cf0">minFrequency</link>&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(spatial_percent*&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(&#32;frequencyRange&#32;));
<anchor xml:id="_audiolizer_8cpp_source_1l00065"/>00065 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;@TEMPORARY&#32;DISABLED</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00066"/>00066 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;int2log_freq(freq);&#32;//&#32;define&#32;here&#32;the&#32;logarthmic&#32;tranformation&#32;of&#32;the&#32;input&#32;freq</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00067"/>00067 
<anchor xml:id="_audiolizer_8cpp_source_1l00068"/>00068 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;translate&#32;the&#32;y&#32;coordinate&#32;</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00069"/>00069 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;roiCenterY&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(roi.<link linkend="_structRegionOfInterest_1a9a5c08c619eb5383833aabae962490df">centerY</link>.load());
<anchor xml:id="_audiolizer_8cpp_source_1l00070"/>00070 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;volume&#32;ranges&#32;from&#32;0.1&#32;up&#32;to&#32;0.7&#32;==&gt;&#32;percentage=0.1+(sample×(0.7−0.1)/maxVal)​</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00071"/>00071 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;volume&#32;=&#32;0.1f&#32;+&#32;((&#32;roiCenterY&#32;*&#32;0.6f)&#32;/&#32;static_cast&lt;float&gt;(cameracfg.camResH.load()));</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00072"/>00072 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;volume&#32;ranges&#32;from&#32;1.0&#32;down&#32;to&#32;0.1&#32;==&gt;&#32;percentage=1.0&#32;-&#32;(sample×(1.0−0.1)/maxVal)​</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00073"/>00073 &#32;&#32;&#32;&#32;volume=&#32;1.0f&#32;-&#32;((&#32;roiCenterY&#32;*&#32;0.9f)&#32;/&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">float</emphasis><emphasis role="keyword">&gt;</emphasis>(cameracfg.<link linkend="_structCameraConfig_1a5aacf3ba605a2c6bfa6a88b971557fa2">camResH</link>.load()));
<anchor xml:id="_audiolizer_8cpp_source_1l00074"/>00074 
<anchor xml:id="_audiolizer_8cpp_source_1l00075"/>00075 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(freq!=prev_freq){&#32;<emphasis role="comment">//&#32;if&#32;previous&#32;frequency&#32;has&#32;the&#32;same&#32;value&#32;as&#32;before&#32;it&#32;returns&#32;the&#32;previous&#32;frequency</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prev_freq&#32;=&#32;freq;
<anchor xml:id="_audiolizer_8cpp_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
<anchor xml:id="_audiolizer_8cpp_source_1l00078"/>00078 &#32;&#32;&#32;&#32;}<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
<anchor xml:id="_audiolizer_8cpp_source_1l00080"/>00080 }
<anchor xml:id="_audiolizer_8cpp_source_1l00081"/>00081 
<anchor xml:id="_audiolizer_8cpp_source_1l00082"/>00082 <emphasis role="keywordtype">void</emphasis>&#32;Audiolizer::gradualy_fade(<emphasis role="keywordtype">int</emphasis>&amp;&#32;freq){
<anchor xml:id="_audiolizer_8cpp_source_1l00083"/>00083 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(freq&gt;(&#32;frequencyRange&#32;)/2)&#32;freq&#32;-=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(2*log(freq));
<anchor xml:id="_audiolizer_8cpp_source_1l00084"/>00084 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(freq&lt;(&#32;frequencyRange&#32;)/2)&#32;freq&#32;-=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(log(freq));
<anchor xml:id="_audiolizer_8cpp_source_1l00085"/>00085 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(freq&lt;0)&#32;freq=0;
<anchor xml:id="_audiolizer_8cpp_source_1l00086"/>00086 }
<anchor xml:id="_audiolizer_8cpp_source_1l00087"/>00087 
<anchor xml:id="_audiolizer_8cpp_source_1l00088"/>00088 
<anchor xml:id="_audiolizer_8cpp_source_1l00089"/>00089 <emphasis role="comment">/*&#32;@TEMPORARY&#32;DISABLED</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00090"/>00090 <emphasis role="comment">void&#32;Audiolizer::init_log_freq_scale(){</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00091"/>00091 <emphasis role="comment">&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00092"/>00092 <emphasis role="comment">&#32;&#32;&#32;&#32;double&#32;minfreq&#32;=&#32;static_cast&lt;double&gt;(iavcfg.minFrequency);</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00093"/>00093 <emphasis role="comment">&#32;&#32;&#32;&#32;double&#32;maxfreq&#32;=&#32;static_cast&lt;double&gt;(iavcfg.maxFrequency);</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00094"/>00094 <emphasis role="comment">&#32;&#32;&#32;&#32;double&#32;maxW&#32;=&#32;static_cast&lt;double&gt;(cameracfg.camResW.load());</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00095"/>00095 <emphasis role="comment"></emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00096"/>00096 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;b&#32;=&#32;log&#32;(y2/y1)&#32;/&#32;(x2-x1)&#32;---&gt;&#32;where&#32;x1&#32;(minW&#32;==0),&#32;x2&#32;(maxW),&#32;y1&#32;(minFreq)&#32;and&#32;y2&#32;(maxFreq)</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00097"/>00097 <emphasis role="comment">&#32;&#32;&#32;&#32;b&#32;=&#32;log&#32;(maxfreq&#32;/&#32;minfreq)&#32;/&#32;(double)(maxW&#32;-&#32;0);</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00098"/>00098 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;a&#32;=&#32;y2&#32;/&#32;exp&#32;bx2</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00099"/>00099 <emphasis role="comment">&#32;&#32;&#32;&#32;a&#32;=&#32;maxfreq&#32;/&#32;(exp(b*(double)maxW));</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00100"/>00100 <emphasis role="comment">&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00101"/>00101 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;given&#32;x,&#32;find&#32;log&#32;freq&#32;by&#32;solving&#32;:&#32;y&#32;=&#32;a&#32;exp&#32;bx</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00102"/>00102 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;...&#32;&#32;(&#32;&#32;&#32;&#32;definition&#32;in&#32;this-&gt;_int2log_freq()&#32;&#32;&#32;&#32;&#32;)</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00103"/>00103 <emphasis role="comment">}</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00104"/>00104 <emphasis role="comment"></emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00105"/>00105 <emphasis role="comment">void&#32;Audiolizer::int2log_freq(int&#32;&amp;freq){</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00106"/>00106 <emphasis role="comment">&#32;&#32;&#32;&#32;//&#32;given&#32;x,&#32;find&#32;log&#32;freq&#32;by&#32;solving&#32;:&#32;y&#32;=&#32;a&#32;exp&#32;bx</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00107"/>00107 <emphasis role="comment">&#32;&#32;&#32;&#32;freq&#32;=&#32;a&#32;*&#32;exp(b&#32;*&#32;static_cast&lt;double&gt;(freq));</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00108"/>00108 <emphasis role="comment">}</emphasis>
<anchor xml:id="_audiolizer_8cpp_source_1l00109"/>00109 <emphasis role="comment">*/</emphasis>
</programlisting></section>
